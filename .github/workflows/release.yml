name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync

    - name: Build package
      run: uv build

    - name: Check build artifacts
      run: |
        ls -la dist/
        echo "[OK] Built packages:"
        file dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 90

  test-built-package:
    name: Test built package
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install built package
      shell: bash
      run: |
        python -m pip install --upgrade pip
        # Find and install the wheel file
        wheel_file=$(find dist/ -name "*.whl" | head -1)
        if [ -n "$wheel_file" ]; then
          python -m pip install "$wheel_file"
        else
          echo "No wheel file found!"
          ls -la dist/
          exit 1
        fi

    - name: Test package installation
      run: |
        nw --help
        python -c "import network_toolkit; print('Import successful')"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test-built-package]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changelog section for this version
        VERSION="${{ steps.version.outputs.version }}"
        if [ -f CHANGELOG.md ]; then
          # Extract section between version headers
          awk "/^## \[?v?${VERSION}\]?/,/^## \[?v?[0-9]/" CHANGELOG.md | head -n -1 | tail -n +2 > release_notes.txt
        else
          echo "Release v${VERSION}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.txt
        fi

        # Add installation instructions
        echo "" >> release_notes.txt
        echo "## Installation" >> release_notes.txt
        echo "" >> release_notes.txt
        echo '### Option 1: Install from GitHub' >> release_notes.txt
        echo '```bash' >> release_notes.txt
        echo "pip install git+https://github.com/narrowin/networka.git@v${VERSION}" >> release_notes.txt
        echo '```' >> release_notes.txt
        echo "" >> release_notes.txt
        echo '### Option 2: Download and install wheel' >> release_notes.txt
        echo '```bash' >> release_notes.txt
        echo "# Download the .whl file from this release, then:" >> release_notes.txt
        echo "pip install net_worker-${VERSION}-py3-none-any.whl" >> release_notes.txt
        echo '```' >> release_notes.txt
        echo "" >> release_notes.txt
        echo '### Option 3: Clone and install' >> release_notes.txt
        echo '```bash' >> release_notes.txt
        echo "git clone https://github.com/narrowin/networka.git" >> release_notes.txt
        echo "cd networka" >> release_notes.txt
        echo "git checkout v${VERSION}" >> release_notes.txt
        echo "uv sync  # or pip install -e ." >> release_notes.txt
        echo '```' >> release_notes.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'a') || contains(steps.version.outputs.version, 'b') || contains(steps.version.outputs.version, 'rc') }}
        generate_release_notes: true
