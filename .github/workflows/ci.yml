name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/**'
      - 'mkdocs.yml'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/**'
      - 'mkdocs.yml'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  workflow-lint:
    name: Lint GitHub Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install actionlint (pinned)
        shell: bash
        run: |
          set -euo pipefail
          VERSION="1.7.1"
          OS="linux"
          ARCH="amd64"
          URL="https://github.com/rhysd/actionlint/releases/download/v${VERSION}/actionlint_${VERSION}_${OS}_${ARCH}.tar.gz"
          echo "Downloading ${URL}"
          curl -sSLo actionlint.tar.gz "$URL"
          mkdir -p ./bin
          tar -xzf actionlint.tar.gz -C ./bin
          ./bin/actionlint -version
      - name: Run actionlint
        run: ./bin/actionlint -color -shellcheck= -pyflakes=

  links:
    name: Check docs links
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Link Checker
        uses: lycheeverse/lychee-action@v2
        with:
          args: "--config .lychee.toml --verbose --no-progress README.md docs/**/*.md"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Matrix tests (push)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install dependencies
        run: uv sync --all-extras --group dev
      - name: Run ruff check
        run: uv run ruff check src/ tests/
      - name: Run ruff format (verify)
        run: uv run ruff format --check src/ tests/
      - name: Run mypy
        run: uv run mypy src/
      - name: Run tests with coverage
        run: uv run pytest --cov=network_toolkit --cov-report=xml --cov-report=term-missing
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
  test-pr:
    name: Fast tests (PR)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install dependencies
        run: uv sync --all-extras --group dev
      - name: Run ruff check
        run: uv run ruff check src/ tests/
      - name: Run ruff format (verify)
        run: uv run ruff format --check src/ tests/
      - name: Run mypy
        run: uv run mypy src/
      - name: Run tests with coverage
        run: uv run pytest --cov=network_toolkit --cov-report=xml --cov-report=term-missing

  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Set up Python
        run: uv python install 3.12
      - name: Install dependencies
        run: uv sync --group dev
      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
          head: HEAD
          extra_args: --debug --only-verified

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Set up Python
        run: uv python install 3.12
      - name: Install docs dependencies
        run: uv sync --extra docs
      - name: Build docs (strict)
        run: uv run mkdocs build --strict

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [workflow-lint, links, test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Set up Python
        run: uv python install 3.12
      - name: Install dependencies
        run: uv sync --extra dev
      - name: Build package
        run: uv build
      - name: Check build artifacts
        run: |
          ls -la dist/
          uv run twine check dist/*
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7
