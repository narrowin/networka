name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  test:
    name: Python ${{ matrix.python-version }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --group dev

    # - name: Run ruff check
    #   run: uv run ruff check .

    # - name: Run ruff format
    #   run: uv run ruff format --check .

    # - name: Run mypy
    #   run: uv run mypy src/

    # - name: Run tests with coverage
    #   run: uv run pytest --cov=network_toolkit --cov-report=xml --cov-report=term-missing

    # - name: Upload coverage to Codecov
    #   if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
    #   uses: codecov/codecov-action@v4
    #   with:
    #     file: ./coverage.xml
    #     fail_ci_if_error: true
    #     token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run secret detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
        head: HEAD
        extra_args: --debug --only-verified

    # - name: Run bandit security linter
    #   run: uv run bandit -r src/ -f json -o bandit-report.json || true

    # - name: Upload bandit report
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: bandit-report
    #     path: bandit-report.json

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --group dev

    - name: Check documentation links
      run: |
        # Add any documentation validation here
        echo "Documentation validation placeholder"

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Build package
      run: uv build

    - name: Check build artifacts
      run: |
        ls -la dist/
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7
