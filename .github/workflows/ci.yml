name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/**'
      - 'mkdocs.yml'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/**'
      - 'mkdocs.yml'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"
          enable-cache: true
      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - name: Set up Python
        run: uv python install 3.12
      - name: Install dependencies
        run: task install
      - name: Run lint checks
        run: task lint
      - name: Run format check
        run: task format:check
      - name: Run type check
        run: task typecheck

  test-pr:
    name: Tests (PR - Fast)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"
          enable-cache: true
      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install dependencies
        run: task install
      - name: Run tests with coverage
        run: task test:ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  test-push:
    name: Tests (Push - Full Matrix)
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"
          enable-cache: true
      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install dependencies
        run: task install
      - name: Run tests with coverage
        run: task test:ci
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"
          enable-cache: true
      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - name: Set up Python
        run: uv python install 3.12
      - name: Install dependencies
        run: task install
      - name: Run security checks
        run: task security
      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run security checks (Bandit)
        run: uv run bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run dependency vulnerability audit
        run: |
          # Install pip-audit if not available
          uv pip install pip-audit
          uv run pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true  # Don't fail CI for audit warnings

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit-report.json
          retention-days: 30

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"
      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - name: Set up Python
        run: uv python install 3.12
      - name: Install docs dependencies
        run: task install
      - name: Build docs (strict)
        run: task docs

  check:
    name: All checks passed
    if: always()
    needs: [lint, test-pr, test-push, security, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [check]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.8"
          enable-cache: true
      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - name: Set up Python
        run: uv python install 3.12
      - name: Install dependencies
        run: task install
      - name: Build package
        run: task build
      - name: Check build artifacts
        run: task build:check
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7
