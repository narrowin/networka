[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "networka"
dynamic = ["version"]
description = "Modern async Python toolkit for network device automation"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "Apache-2.0" }
keywords = ["network", "automation", "mikrotik", "routeros", "cli", "async", "narrowin", "networking", "infrastructure"]
authors = [
    { name = "narrowin", email = "contact@narrowin.com" },
]
maintainers = [
    { name = "narrowin", email = "contact@narrowin.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Telecommunications Industry",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "scrapli[paramiko]>=2023.7.30",
    "scrapli[community]>=2023.7.30",
    "pydantic>=2.5.0",
    "pyyaml>=6.0",
    "typer>=0.12.0",
    "rich>=13.0.0",
    "asyncssh>=2.21.0",
    "scrapli-community>=2025.1.30",
    "libtmux>=0.46.2",
    "python-dotenv>=1.0.0",
    "textual>=0.58.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.8.0",
    "detect-secrets>=1.4.0",
    "bandit>=1.7.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "types-PyYAML>=6.0.0",
    "types-paramiko>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
tmux = [
    "libtmux>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/narrowin/networka"
Documentation = "https://github.com/narrowin/networka#readme"
Repository = "https://github.com/narrowin/networka.git"
"Bug Tracker" = "https://github.com/narrowin/networka/issues"
Changelog = "https://github.com/narrowin/networka/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/narrowin/networka"
"CI/CD" = "https://github.com/narrowin/networka/actions"

[project.scripts]
nw = "network_toolkit.cli:app"
nw-tui = "network_toolkit.tui:run"

[tool.hatch.version]
path = "src/network_toolkit/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "pytest-asyncio",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
    "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/network_toolkit tests}"

[tool.coverage.run]
source_pkgs = ["network_toolkit", "tests"]
branch = true
parallel = true
omit = [
    "src/network_toolkit/__about__.py",
]

[tool.coverage.paths]
network_toolkit = ["src/network_toolkit", "*/networka/src/network_toolkit"]
tests = ["tests", "*/networka/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Package build configuration (hatchling)
# - Ensure non-Python assets needed at runtime are included in wheels
# - Provide a source distribution that contains helpful docs and scripts
[tool.hatch.build.targets.wheel]
packages = ["src/network_toolkit"]
include = [
    # Typing marker for consumers
    "src/network_toolkit/py.typed",
    # Built-in sequence YAMLs needed at runtime
    "src/network_toolkit/builtin_sequences/**/*.yml",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/**",
    "README.md",
    "LICENSE*",
    "docs/**",
    # Shell completion helpers and example defaults (useful for users)
    "bash_completion_nw.sh",
    "fish_completion_nw.fish",
    "zsh_completion_nw.zsh",
    "default_configs/**",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Temporarily disable for build testing
    "PLC0415",  # Import outside toplevel
    "ARG002",   # Unused method argument
    "S108",     # Probable insecure usage of temp file/directory
    "B017",     # pytest.raises without match parameter
    "F401",     # Unused imports
    "RUF100",   # Unused noqa directive
    # Additional common issues
    "T201",     # print found
    "T203",     # pprint found
    "FBT001",   # Boolean positional arg in function definition
    "FBT002",   # Boolean default value in function definition
    "PLR2004",  # Magic value used in comparison
    "S101",     # Use of assert detected
    "PLW2901",  # Redefined loop variable
    "PLR0917",  # Too many positional arguments
    "E501",     # Line too long
    "ARG001",   # Unused function argument
    "S603",     # subprocess call check for execution of untrusted input
    "S110",     # try-except-pass detected
    "F821",     # Undefined name
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["network_toolkit"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[dependency-groups]
dev = [
    "detect-secrets>=1.5.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
    # Helper tooling for developing the Textual TUI (live reload, inspector)
    "textual-dev>=1.0.0",
]
