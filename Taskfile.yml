version: '3'

vars:
  PROJECT_NAME: networka
  PACKAGE_NAME: network_toolkit
  PYTHON_VERSION: "3.11"

env:
  FORCE_COLOR: "1"
  PYTHONPATH: "./src"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  install:
    desc: Install development dependencies
    cmds:
      - echo "Installing development dependencies..."
      - uv sync --all-extras --group dev
    sources:
      - pyproject.toml
      - uv.lock
    generates:
      - .venv/**

  format:
    desc: Format code with ruff
    cmds:
      - echo "Formatting code..."
      - uv run ruff format .
    sources:
      - src/**/*.py
      - tests/**/*.py

  format:check:
    desc: Check code formatting with ruff
    cmds:
      - echo "Checking code formatting..."
      - uv run ruff format --check .
    sources:
      - src/**/*.py
      - tests/**/*.py

  lint:
    desc: Lint code with ruff
    cmds:
      - echo "Linting code..."
      - uv run ruff check .
    sources:
      - src/**/*.py
      - tests/**/*.py

  lint:fix:
    desc: Lint and fix code with ruff
    cmds:
      - echo "Linting and fixing code..."
      - uv run ruff check --fix .
    sources:
      - src/**/*.py
      - tests/**/*.py

  typecheck:
    desc: Type check with mypy
    cmds:
      - echo "Type checking..."
      - uv run mypy src/
    sources:
      - src/**/*.py
      - pyproject.toml

  test:
    desc: Run tests (local development)
    cmds:
      - echo "Running tests (local development mode)..."
      - uv run pytest -v
    sources:
      - src/**/*.py
      - tests/**/*.py
      - pyproject.toml

  test:ci:
    desc: Run tests with CI-exact environment (MANDATORY for CI parity)
    env:
      FORCE_COLOR: "1"
      PYTHONUNBUFFERED: "1"
      CI: "true"
      COLUMNS: "150"
      UV_FROZEN: "true"
    cmds:
      - echo "Running tests with CI-exact environment..."
      - echo "Environment variables:"
      - echo "  FORCE_COLOR=$FORCE_COLOR"
      - echo "  PYTHONUNBUFFERED=$PYTHONUNBUFFERED"
      - echo "  CI=$CI"
      - echo "  COLUMNS=$COLUMNS"
      - echo "  UV_FROZEN=$UV_FROZEN"
      - uv run pytest --cov={{.PACKAGE_NAME}} --cov-report=xml --cov-report=term-missing --tb=short --color=yes
    sources:
      - src/**/*.py
      - tests/**/*.py
      - pyproject.toml
    generates:
      - coverage.xml
      - .coverage

  test:cov:
    desc: Run tests with coverage (local HTML report)
    cmds:
      - echo "Running tests with HTML coverage..."
      - uv run pytest --cov={{.PACKAGE_NAME}} --cov-report=term-missing --cov-report=html
    sources:
      - src/**/*.py
      - tests/**/*.py
    generates:
      - htmlcov/**
      - .coverage

  test:fast:
    desc: Run tests in parallel (no coverage)
    cmds:
      - echo "Running tests in parallel..."
      - uv run pytest -n auto
    sources:
      - src/**/*.py
      - tests/**/*.py

  security:
    desc: Run security checks
    cmds:
      - echo "Running security checks..."
      - uv run bandit -r src/ -f json -o bandit-report.json || true
      - echo "Security report saved to bandit-report.json"
    sources:
      - src/**/*.py
    generates:
      - bandit-report.json

  secrets:
    desc: Scan for secrets
    cmds:
      - echo "Scanning for secrets..."
      - uv run detect-secrets scan --all-files --baseline .secrets.baseline
    sources:
      - "**/*.py"
      - "**/*.yml"
      - "**/*.yaml"
      - "**/*.json"

  check:
    desc: Run all quality checks
    deps:
      - lint
      - typecheck
      - test
    cmds:
      - echo "All checks passed!"

  build:
    desc: Build package for GitHub release
    cmds:
      - echo "Building package for GitHub distribution..."
      - rm -rf dist/
      - uv build
      - echo "Built files:"
      - ls -la dist/
    sources:
      - src/**/*.py
      - pyproject.toml
      - README.md
      - CHANGELOG.md
    generates:
      - dist/**

  build:check:
    desc: Build and validate package structure
    cmds:
      - echo "Building and validating package..."
      - uv build
      - echo "Package structure check:"
      - tar -tzf dist/*.tar.gz | head -20
      - unzip -l dist/*.whl | head -20
    sources:
      - src/**/*.py
      - pyproject.toml
      - README.md
      - CHANGELOG.md
    generates:
      - dist/**

  clean:
    desc: Clean build artifacts
    cmds:
      - echo "Cleaning build artifacts..."
      - rm -rf build/
      - rm -rf dist/
      - rm -rf *.egg-info/
      - rm -rf .pytest_cache/
      - rm -rf .coverage
      - rm -rf htmlcov/
      - rm -rf .mypy_cache/
      - rm -rf .ruff_cache/
      - find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
      - find . -type f -name "*.pyc" -delete 2>/dev/null || true
      - echo "Clean complete!"

  docs:
    desc: Generate documentation
    cmds:
      - echo "Generating documentation..."
      - uv run mkdocs build --strict

  docs:serve:
    desc: Serve documentation locally with live reload
    cmds:
      - echo "Serving documentation on http://0.0.0.0:8000 ..."
      - uv run mkdocs serve -a 0.0.0.0:8000

  docs:check-links:
    desc: Check documentation links locally (requires docs server to be running)
    cmds:
      - echo "Checking links with lychee via Docker..."
      - docker run --rm --network host -v "$(pwd):/input:ro" lycheeverse/lychee:latest --config /input/.lychee.toml "/input/**/*.md"

  docs:test:
    desc: Build docs and check links
    cmds:
      - task: docs
      - echo "Starting docs server in background..."
      - nohup uv run mkdocs serve -a 0.0.0.0:8000 > /dev/null 2>&1 &
      - sleep 3
      - task: docs:check-links
      - pkill -f "mkdocs serve" || true

  release:dry:
    desc: Test release script in dry-run mode
    interactive: true
    cmds:
      - echo "Testing release script..."
      - |
        read -p "Enter version (e.g., 1.0.0): " version
        ./scripts/release.sh --version "$version" --dry-run

  release:
    desc: Execute release using release script
    interactive: true
    cmds:
      - echo "WARNING - This will create a new release and push to GitHub"
      - echo "Make sure you are on main branch with clean working directory"
      - |
        read -p "Enter version (e.g., 1.0.0): " version
        read -p "Are you sure you want to release v$version? (y/N): " confirm
        if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
          ./scripts/release.sh --version "$version"
        else
          echo "Release cancelled"
        fi

  dev:
    desc: Set up development environment and run checks
    deps:
      - install
      - lint:fix
      - typecheck
      - test
    cmds:
      - echo "Development environment ready!"

  ci:
    desc: Run CI checks locally (matches GitHub Actions exactly)
    deps:
      - lint
      - typecheck
      - test:ci
      - security
    cmds:
      - echo "CI checks completed - matches GitHub Actions environment!"

  update:
    desc: Update dependencies
    cmds:
      - echo "Updating dependencies..."
      - uv sync --upgrade
    generates:
      - uv.lock

  shell:
    desc: Open a shell in the virtual environment
    cmds:
      - echo "Opening shell in virtual environment..."
      - uv shell

  run:
    desc: Run the CLI tool (nw --help)
    cmds:
      - echo "Running networka CLI..."
      - uv run nw --help

  run:info:
    desc: Show CLI info command
    cmds:
      - echo "Running nw info..."
      - uv run nw info || echo "No devices configured yet"

  run:version:
    desc: Show CLI version
    cmds:
      - echo "Showing version..."
      - uv run nw version

  install:task:
    desc: Install go-task if not present
    cmds:
      - |
        if ! command -v task &> /dev/null; then
          echo "Installing go-task..."
          if command -v brew &> /dev/null; then
            brew install go-task
          elif command -v apt-get &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y wget
            wget -O task.deb https://github.com/go-task/task/releases/latest/download/task_linux_amd64.deb
            sudo dpkg -i task.deb
            rm task.deb
          elif command -v yum &> /dev/null; then
            sudo yum install -y wget
            wget -O task.rpm https://github.com/go-task/task/releases/latest/download/task_linux_amd64.rpm
            sudo rpm -i task.rpm
            rm task.rpm
          else
            echo "Please install go-task manually: https://taskfile.dev/installation/"
            exit 1
          fi
        else
          echo "go-task is already installed"
        fi
    status:
      - command -v task

  bootstrap:
    desc: Bootstrap the entire development environment
    deps:
      - install:task
      - install
    cmds:
      - echo "Bootstrap complete! Run 'task dev' to set up development environment."
