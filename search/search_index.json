{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Networka","text":"<p>Modern async Python toolkit for network device automation.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Multi-vendor automation (MikroTik, Cisco, Arista, Juniper, \u2026)</li> <li>Async concurrent operations for speed and scale</li> <li>Flexible configuration (YAML/CSV), tags and groups</li> <li>Vendor-aware sequences and backups</li> <li>Rich CLI output with selectable output modes</li> <li>Type-safe internals (mypy), clean CLI (Typer + Rich)</li> </ul>"},{"location":"#get-started","title":"Get started","text":"<p>Start with the Quickstart, then explore the User guide for config, environment variables, output modes, results, and more.</p> <p>Python 3.11+ is required.</p>"},{"location":"backups/","title":"Backups","text":"<p>Vendor-aware backup commands streamline configuration and system snapshots.</p> <p>Common commands:</p> <pre><code># Configuration export only\nnw backup config device1\n\n# Comprehensive backup (configuration + system data)\nnw backup comprehensive device1\n\n# Group operations with options\nnw backup comprehensive office_switches --store-results\nnw backup config device1 --delete-remote\n</code></pre> <p>Platform behavior: - MikroTik RouterOS: creates <code>.rsc</code> (export) and optionally <code>.backup</code> (system) - Cisco IOS/IOS-XE: collects configuration and system info outputs</p> <p>Tips: - Combine with <code>--store-results</code> to archive outputs in the results directory. - Use device groups to back up multiple devices concurrently. - See vendor pages for platform-specific details.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This guide explains how to define devices, groups, and sequences for Networka. YAML is the preferred and most expressive format. CSV is supported mainly for users who manage inventories in spreadsheets on Windows. You can mix formats; use YAML by default and add CSV where it makes workflow sense.</p>"},{"location":"configuration/#directory-layout","title":"Directory layout","text":"<p>Place configuration under the <code>config/</code> directory:</p> <pre><code>config/\n\u251c\u2500\u2500 config.yml                 # Optional global defaults\n\u251c\u2500\u2500 devices/                   # Device definitions (YAML or CSV)\n\u2502   \u251c\u2500\u2500 router1.yml\n\u2502   \u2514\u2500\u2500 inventory.csv\n\u251c\u2500\u2500 groups/                    # Named groups and tag-based groups\n\u2502   \u251c\u2500\u2500 core.yml\n\u2502   \u2514\u2500\u2500 teams.csv\n\u2514\u2500\u2500 sequences/                 # Reusable command sequences per vendor or shared\n    \u251c\u2500\u2500 common.yml\n    \u2514\u2500\u2500 mikrotik_routeros.yml\n</code></pre> <p>Networka loads all files in these folders. Later files override earlier ones when names collide.</p>"},{"location":"configuration/#common-concepts-applies-to-yaml-and-csv","title":"Common concepts (applies to YAML and CSV)","text":"<ul> <li>Device name: unique identifier used on the CLI (e.g., <code>nw run router1 ...</code>).</li> <li>Host: IP or DNS name to connect to.</li> <li>Device type: vendor/platform key (e.g., <code>mikrotik_routeros</code>, <code>cisco_iosxe</code>).</li> <li>Groups: explicit member lists and/or tag-based membership.</li> <li>Sequences: named sets of commands to run consistently.</li> </ul> <p>Credentials come from environment variables; see Environment variables for details.</p>"},{"location":"configuration/#yaml","title":"YAML (preferred)","text":"<p>YAML gives you clarity, comments, nesting, and future-proofing. Prefer it for everything beyond one-off imports.</p>"},{"location":"configuration/#minimal-device","title":"Minimal device","text":"<pre><code># config/devices/router1.yml\nhost: 192.0.2.10\ndevice_type: mikrotik_routeros\ntags: [edge, router]\n</code></pre>"},{"location":"configuration/#group-examples","title":"Group examples","text":"<pre><code># config/groups/core.yml\nname: core\ndescription: Core network devices\nmembers: [sw-01, sw-02]\n\n---\n# config/groups/edge.yml\nname: edge\ndescription: Edge devices\nmatch_tags: [edge]\n</code></pre>"},{"location":"configuration/#sequence-example","title":"Sequence example","text":"<pre><code># config/sequences/common.yml\nhealth_check:\n  description: Basic health check\n  commands:\n    - /system/resource/print\n    - /interface/print stats\n</code></pre>"},{"location":"configuration/#csv","title":"CSV (optional, mostly for Windows workflows)","text":"<p>Use CSV if your source of truth is a spreadsheet. It\u2019s convenient for bulk imports. Keep it simple and map columns to the same concepts as YAML.</p>"},{"location":"configuration/#devices-csv","title":"Devices CSV","text":"<p>Required columns: <code>name</code>, <code>host</code></p> <p>Optional: <code>device_type</code>, <code>description</code>, <code>platform</code>, <code>model</code>, <code>location</code>, <code>tags</code> (semicolon-separated)</p> <pre><code>name,host,device_type,description,platform,model,location,tags\nsw-01,192.168.1.1,mikrotik_routeros,Main Switch,mipsbe,CRS326,Rack A1,switch;core;critical\nrtr-01,192.168.1.254,mikrotik_routeros,Edge Router,arm,RB4011,Closet,router;edge\n</code></pre>"},{"location":"configuration/#groups-csv","title":"Groups CSV","text":"<p>Required: <code>name</code>, <code>description</code></p> <p>Optional: <code>members</code> (semicolon-separated), <code>match_tags</code> (semicolon-separated)</p> <pre><code>name,description,members,match_tags\ncore_switches,Core network switches,sw-01;sw-02,switch;core\nedge_devices,Edge routers and firewalls,,edge;firewall\n</code></pre>"},{"location":"configuration/#sequences-csv","title":"Sequences CSV","text":"<p>Required: <code>name</code>, <code>description</code>, <code>commands</code> (semicolon-separated)</p> <p>Optional: <code>tags</code> (semicolon-separated)</p> <pre><code>name,description,commands,tags\nhealth_check,Basic health check,/system/resource/print;/interface/print stats,monitoring;health\n</code></pre>"},{"location":"configuration/#yaml-vs-csv-differences-at-a-glance","title":"YAML vs CSV: differences at a glance","text":"<ul> <li>Expressiveness: YAML supports comments, nesting, and complex structures; CSV is flat.</li> <li>Multi-valued fields: In YAML, use lists; in CSV, use semicolon-separated values.</li> <li>Merging/overrides: Both support file-level overrides by name; YAML is clearer for intent.</li> <li>Editing: YAML with version control vs. CSV with spreadsheets\u2014choose per team.</li> </ul> <p>Recommendation: Use YAML for long-term, reviewable configuration. Use CSV for quick imports or where spreadsheets are mandated.</p>"},{"location":"configuration/#mixing-formats","title":"Mixing formats","text":"<p>Mixing is supported. If both YAML and CSV define the same device/group/sequence name, the later-loaded file wins according to filesystem order. Keep ownership clear to avoid surprises.</p>"},{"location":"configuration/#next-steps","title":"Next steps","text":"<ul> <li>Set credentials and defaults \u2192 Environment variables</li> <li>Run common tasks \u2192 Running commands</li> <li>Inspect outputs and control formatting \u2192 Results and Output modes</li> </ul>"},{"location":"development/","title":"Development Guide","text":"<p>This guide is for contributors and maintainers working on the Networka codebase.</p>"},{"location":"development/#quick-start","title":"Quick start","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>uv package manager</li> <li>git</li> </ul>"},{"location":"development/#setup-development-environment","title":"Setup development environment","text":"<pre><code># Clone the repository\ngit clone https://github.com/narrowin/networka.git\ncd networka\n\n# Install dependencies with development tools\nuv sync\n\n# Install pre-commit hooks\nuv run pytest --version\nuv run ruff --version\nuv run mypy --version\n</code></pre>"},{"location":"development/#development-workflow","title":"Development workflow","text":"<pre><code># Run all quality checks\nuv run ruff check .              # Linting\nuv run ruff format .             # Code formatting\nuv run mypy src/                 # Type checking\nuv run pytest                   # Run tests\n\n# Or use the convenience script\n./scripts/build.sh               # Run all checks + build\n\n# Or use task runner (if you have go-task installed)\ntask dev                         # Complete development setup\ntask test                        # Run tests\n### CI workflow checks locally\n\n- Lint workflows (fast):\n    - With Docker: `docker run --rm -v \"$PWD:/repo\" -w /repo rhysd/actionlint:latest`\n    - Or with act: `act pull_request -W .github/workflows/ci.yml -j workflow-lint`\n\nWhy run as a PR? Pull requests trigger different paths/conditions (e.g., `pull_request` filters, PR-only jobs). Simulating PR avoids surprises that don\u2019t appear on `push`.\n\n### Docs\n\n- Strict docs build:\n    - `uv run mkdocs build --strict`\n\nLink checking runs in CI only.\ntask lint                        # Run linting\ntask build                       # Build package\n</code></pre>"},{"location":"development/#code-standards","title":"Code standards","text":""},{"location":"development/#style-guidelines","title":"Style guidelines","text":"<ul> <li>Type hints: All functions must have type annotations</li> <li>Docstrings: Use NumPy-style docstrings for public functions</li> <li>Async patterns: Use async/await for all I/O operations</li> <li>Error handling: Use custom exceptions from <code>exceptions.py</code></li> <li>Testing: Write tests for all new features</li> </ul>"},{"location":"development/#code-quality-tools","title":"Code quality tools","text":"<ul> <li>Linting: ruff (replaces flake8, isort, black)</li> <li>Type checking: mypy with strict settings</li> <li>Testing: pytest with async support</li> <li>Security: bandit for security linting</li> </ul>"},{"location":"development/#example-code-patterns","title":"Example code patterns","text":"<pre><code># Async function with proper typing\nasync def execute_command(\n    device_name: str,\n    command: str,\n    config: NetworkConfig\n) -&gt; CommandResult:\n    \"\"\"Execute a command on a network device.\n\n    Parameters\n    ----------\n    device_name : str\n        Name of the device to execute command on\n    command : str\n        Command to execute\n    config : NetworkConfig\n        Device configuration\n\n    Returns\n    -------\n    CommandResult\n        Result of command execution\n\n    Raises\n    ------\n    DeviceConnectionError\n        If connection to device fails\n    DeviceExecutionError\n        If command execution fails\n    \"\"\"\n    try:\n        async with DeviceSession(device_name, config) as session:\n            return await session.execute_command(command)\n    except ScrapliException as e:\n        raise DeviceConnectionError(f\"Failed to connect to {device_name}\") from e\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=network_toolkit --cov-report=term-missing\n\n# Run specific test file\nuv run pytest tests/test_device.py\n\n# Run with verbose output\nuv run pytest -v\n\n# Run async tests only\nuv run pytest -m asyncio\n</code></pre>"},{"location":"development/#writing-tests","title":"Writing tests","text":"<pre><code>import pytest\nfrom unittest.mock import patch, AsyncMock\nfrom network_toolkit.device import DeviceSession\nfrom network_toolkit.config import NetworkConfig\n\n@pytest.mark.asyncio\nasync def test_device_connection(mock_config: NetworkConfig):\n    \"\"\"Test device connection establishment.\"\"\"\n    with patch('scrapli.AsyncScrapli') as mock_scrapli:\n        mock_scrapli.return_value.__aenter__.return_value.send_command = AsyncMock(\n            return_value=MockResponse(result=\"test output\")\n        )\n\n        async with DeviceSession(\"test_device\", mock_config) as session:\n            result = await session.execute_command(\"/system/identity/print\")\n            assert result.output == \"test output\"\n\n@pytest.fixture\ndef mock_config() -&gt; NetworkConfig:\n    \"\"\"Provide test configuration.\"\"\"\n    return NetworkConfig(\n        general=GeneralConfig(timeout=30),\n        devices={\"test\": DeviceConfig(host=\"192.168.1.1\")}\n    )\n</code></pre>"},{"location":"development/#building-and-releasing","title":"Building and releasing","text":""},{"location":"development/#local-build","title":"Local build","text":"<pre><code># Build package locally\nuv build\n\n# Verify build\nuv run twine check dist/*\n\n# Test installation\npip install dist/*.whl\nnw --help\n</code></pre>"},{"location":"development/#release-process","title":"Release process","text":"<p>IMPORTANT: Always use the release script. Manual tag creation will fail due to version validation.</p> <ol> <li>Prepare for release</li> </ol> <pre><code># Ensure you're on main branch with clean working directory\ngit checkout main\ngit pull origin main\ngit status  # Should show no uncommitted changes\n\n# Run quality checks\ntask test\ntask lint\ntask format\n</code></pre> <ol> <li>Update CHANGELOG.md</li> </ol> <p>Manually update the changelog with new features, fixes, and changes for the upcoming version.</p> <ol> <li>Execute release</li> </ol> <pre><code># Test the release process first\n./scripts/release.sh --version 1.0.0 --dry-run\n\n# Execute the actual release\n./scripts/release.sh --version 1.0.0\n</code></pre> <p>The release script automatically:</p> <ul> <li>Updates version in <code>src/network_toolkit/__about__.py</code></li> <li>Updates <code>CHANGELOG.md</code> with release date</li> <li>Commits changes with <code>chore: bump version to v1.0.0</code></li> <li>Pushes the commit to main</li> <li> <p>Creates and pushes the release tag</p> </li> <li> <p>Automated GitHub Actions</p> </li> <li>Validates version consistency between tag and code</li> <li>Builds and tests package on multiple platforms (Linux, Windows, macOS)</li> <li>Creates GitHub release with build artifacts</li> <li>Attaches wheel and source distribution files</li> </ul> <p>Never manually create release tags - this will cause version mismatch errors in the build process.</p>"},{"location":"development/#project-structure","title":"Project structure","text":"<pre><code>networka/\n\u251c\u2500\u2500 src/network_toolkit/     # Main package\n\u2502   \u251c\u2500\u2500 cli.py              # CLI interface\n\u2502   \u251c\u2500\u2500 config.py           # Configuration models\n\u2502   \u251c\u2500\u2500 device.py           # Device connections\n\u2502   \u251c\u2500\u2500 exceptions.py       # Custom exceptions\n\u2502   \u2514\u2500\u2500 results_enhanced.py # Results management\n\u251c\u2500\u2500 tests/                  # Test suite\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 scripts/                # Build and utility scripts\n\u251c\u2500\u2500 config/                 # Example configurations\n\u2514\u2500\u2500 pyproject.toml         # Project configuration\n</code></pre>"},{"location":"development/#adding-new-features","title":"Adding new features","text":""},{"location":"development/#1-plan-the-feature","title":"1. Plan the feature","text":"<ul> <li>Create or discuss GitHub issue</li> <li>Design API and data models</li> <li>Consider backward compatibility</li> </ul>"},{"location":"development/#2-implement-the-feature","title":"2. Implement the feature","text":"<ul> <li>Follow existing code patterns</li> <li>Add proper type annotations</li> <li>Include comprehensive error handling</li> <li>Write docstrings</li> </ul>"},{"location":"development/#3-add-tests","title":"3. Add tests","text":"<ul> <li>Unit tests for core functionality</li> <li>Integration tests for CLI commands</li> <li>Mock external dependencies (network calls)</li> <li>Aim for &gt;90% coverage</li> </ul>"},{"location":"development/#4-update-documentation","title":"4. Update documentation","text":"<ul> <li>Update relevant docs in <code>docs/</code></li> <li>Add examples if applicable</li> <li>Update CLI help text</li> </ul>"},{"location":"development/#5-submit-pull-request","title":"5. Submit pull request","text":"<ul> <li>Run all quality checks locally</li> <li>Write clear commit messages</li> <li>Include tests and documentation</li> <li>Reference related issues</li> </ul>"},{"location":"development/#common-development-tasks","title":"Common development tasks","text":""},{"location":"development/#adding-a-new-cli-command","title":"Adding a new CLI command","text":"<pre><code>@app.command()\ndef new_command(\n    device: Annotated[str, typer.Argument(help=\"Device name\")],\n    verbose: Annotated[bool, typer.Option(\"--verbose\", \"-v\")] = False,\n) -&gt; None:\n    \"\"\"Description of the new command.\"\"\"\n    setup_logging(\"DEBUG\" if verbose else \"INFO\")\n\n    try:\n        config = load_config()\n        # Implementation here\n        console.print(\"[green]Success[/green]\")\n    except NetworkToolkitError as e:\n        console.print(f\"[red]Error: {e}[/red]\")\n        raise typer.Exit(1)\n</code></pre>"},{"location":"development/#adding-device-type-support","title":"Adding device type support","text":"<ol> <li>Add device type to <code>DeviceType</code> enum in <code>config.py</code></li> <li>Add scrapli platform mapping in <code>device.py</code></li> <li>Add vendor-specific sequences in <code>builtin_sequences/</code></li> <li>Write tests for the new device type</li> </ol>"},{"location":"development/#debugging-tips","title":"Debugging tips","text":"<pre><code># Enable debug logging\nexport NW_LOG_LEVEL=DEBUG\nnw your-command\n\n# Use pytest debugging\nuv run pytest --pdb tests/test_file.py::test_function\n\n# Profile performance\nuv run python -m cProfile -o profile.stats -m network_toolkit.cli run device command\n</code></pre>"},{"location":"development/#continuous-integration","title":"Continuous integration","text":"<p>The project uses GitHub Actions for CI/CD:</p> <ul> <li>Tests: Run on Python 3.11-3.13 across Ubuntu, Windows, macOS</li> <li>Quality: Linting, type checking, security scans</li> <li>Build: Package building and validation</li> <li>Release: Automated releases on git tags</li> </ul>"},{"location":"development/#local-ci-simulation","title":"Local CI simulation","text":"<pre><code># Run the same checks as CI\n./scripts/build.sh\n\n# Or with task runner\ntask ci\n</code></pre>"},{"location":"development/#getting-help","title":"Getting help","text":"<ul> <li>Code questions: Create GitHub issue with \"question\" label</li> <li>Bugs: Use bug report template in GitHub issues</li> <li>Features: Use feature request template</li> <li>Security: See SECURITY.md for reporting process</li> </ul>"},{"location":"development/#code-review-guidelines","title":"Code review guidelines","text":""},{"location":"development/#for-contributors","title":"For contributors","text":"<ul> <li>Keep PRs focused and small</li> <li>Write clear commit messages</li> <li>Include tests for new functionality</li> <li>Update documentation as needed</li> <li>Be responsive to feedback</li> </ul>"},{"location":"development/#for-reviewers","title":"For reviewers","text":"<ul> <li>Focus on code correctness and maintainability</li> <li>Check that tests adequately cover new code</li> <li>Verify documentation updates</li> <li>Ensure adherence to coding standards</li> <li>Be constructive and helpful in feedback</li> </ul>"},{"location":"environment-variables/","title":"Environment Variable Configuration","text":"<p>This document describes how to set up secure credential management using environment variables for the Networka.</p>"},{"location":"environment-variables/#overview","title":"Overview","text":"<p>For security best practices, all device credentials have been moved from the <code>devices.yml</code> configuration file to environment variables. This prevents sensitive information from being stored in version control.</p> <p>The Networka now supports multiple levels of credential management:</p> <ul> <li>Device-specific credentials - For individual devices</li> <li>Group-level credentials - For entire device groups</li> <li>Default credentials - Fallback for all devices</li> </ul>"},{"location":"environment-variables/#required-environment-variables","title":"Required Environment Variables","text":""},{"location":"environment-variables/#default-credentials","title":"Default Credentials","text":"<p>Set these environment variables for the default credentials used by devices that don't have specific overrides:</p> <pre><code>export NW_USER_DEFAULT=admin\nexport NW_PASSWORD_DEFAULT=your_secure_password_here\n</code></pre>"},{"location":"environment-variables/#device-specific-credentials-optional","title":"Device-Specific Credentials (Optional)","text":"<p>You can override credentials for specific devices using the pattern:</p> <ul> <li><code>NW_USER_DEVICENAME</code> - Username for the specific device</li> <li><code>NW_PASSWORD_DEVICENAME</code> - Password for the specific device</li> </ul> <p>Device names should match those in <code>devices.yml</code> and will be automatically converted to uppercase with hyphens replaced by underscores.</p> <p>Examples:</p> <pre><code># For device 'sw-acc1' in devices.yml\nexport NW_USER_SW_ACC1=admin\nexport NW_PASSWORD_SW_ACC1=switch1_password\n\n# For device 'sw-acc2' in devices.yml\nexport NW_USER_SW_ACC2=admin\nexport NW_PASSWORD_SW_ACC2=switch2_password\n\n# For device 'sw-dist1' in devices.yml\nexport NW_USER_SW_DIST1=admin\nexport NW_PASSWORD_SW_DIST1=distribution_password\n</code></pre>"},{"location":"environment-variables/#group-level-credentials-new-feature","title":"Group-Level Credentials (New Feature)","text":"<p>You can set credentials for entire device groups using the pattern:</p> <ul> <li><code>NW_USER_GROUPNAME</code> - Username for all devices in the group</li> <li><code>NW_PASSWORD_GROUPNAME</code> - Password for all devices in the group</li> </ul> <p>Group names should match those in <code>groups.yml</code>:</p> <pre><code># For group 'access_switches' in groups.yml\nexport NW_USER_ACCESS_SWITCHES=switch_admin\nexport NW_PASSWORD_ACCESS_SWITCHES=access_layer_password\n\n# For group 'critical_infrastructure' in groups.yml\nexport NW_USER_CRITICAL_INFRASTRUCTURE=critical_admin\nexport NW_PASSWORD_CRITICAL_INFRASTRUCTURE=critical_systems_password\n</code></pre>"},{"location":"environment-variables/#setup-methods","title":"Setup Methods","text":""},{"location":"environment-variables/#option-1-environment-file-env-recommended","title":"Option 1: Environment File (.env) - Recommended","text":"<p>The Network Toolkit automatically loads environment variables from <code>.env</code> files, making credential management simple and secure.</p> <ol> <li>Copy the example environment file:</li> </ol> <pre><code>cp .env.example .env\n</code></pre> <ol> <li>Edit <code>.env</code> with your actual credentials:</li> </ol> <pre><code>nano .env\n</code></pre> <ol> <li>Run the tool directly - the <code>.env</code> file is loaded automatically:    <pre><code>nw run system_info sw-acc1\n</code></pre></li> </ol>"},{"location":"environment-variables/#env-file-locations","title":".env File Locations","text":"<p>The toolkit automatically looks for <code>.env</code> files in the following order (highest to lowest precedence):</p> <ol> <li>Environment Variables (Highest priority) - Variables already set in your shell</li> <li>Config Directory - <code>.env</code> file in the same directory as your config files</li> <li>Current Working Directory (Lowest priority) - <code>.env</code> file in your current directory</li> </ol> <p>This allows for flexible credential management:</p> <ul> <li>Place <code>.env</code> in your project/config directory for project-specific credentials</li> <li>Place <code>.env</code> in your working directory for global defaults</li> <li>Use shell environment variables for runtime overrides</li> </ul>"},{"location":"environment-variables/#option-2-export-in-shell","title":"Option 2: Export in Shell","text":"<p>Add to your <code>~/.bashrc</code> or <code>~/.zshrc</code>:</p> <pre><code># Network Toolkit Credentials\nexport NW_USER_DEFAULT=admin\nexport NW_PASSWORD_DEFAULT=your_secure_password\n\n# Device-specific overrides\nexport NW_PASSWORD_SW_ACC1=switch1_password\nexport NW_PASSWORD_SW_ACC2=switch2_password\nexport NW_PASSWORD_SW_DIST1=distribution_password\n</code></pre> <p>Then reload your shell:</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"environment-variables/#option-3-runtime-export","title":"Option 3: Runtime Export","text":"<p>Set variables directly before running commands:</p> <pre><code>export NW_USER_DEFAULT=admin\nexport NW_PASSWORD_DEFAULT=your_password\npython -m network_toolkit.cli run system_info sw-acc1\n</code></pre>"},{"location":"environment-variables/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit <code>.env</code> files: The <code>.env</code> file is already in <code>.gitignore</code> - keep it that way</li> <li>Use strong passwords: Generate unique, complex passwords for each device</li> <li>Limit environment access: Only set these variables in environments where the tool runs</li> <li>Regular rotation: Change passwords regularly and update environment variables accordingly</li> <li>Least privilege: Create device-specific users with minimal required permissions</li> </ol>"},{"location":"environment-variables/#credential-resolution-order","title":"Credential Resolution Order","text":"<p>The toolkit resolves credentials in this priority order:</p> <ol> <li>Interactive credentials (Highest) - When <code>--interactive-auth</code> is used</li> <li>Device configuration - Explicitly set credentials in device YAML files (supported but discouraged)</li> <li>Device-specific environment variables - <code>NW_USER_DEVICENAME</code> and <code>NW_PASSWORD_DEVICENAME</code></li> <li>Group-level credentials - From group configuration or <code>NW_USER_GROUPNAME</code> and <code>NW_PASSWORD_GROUPNAME</code></li> <li>Default environment variables (Lowest) - <code>NW_USER_DEFAULT</code> and <code>NW_PASSWORD_DEFAULT</code></li> </ol> <p>This precedence allows you to:</p> <ul> <li>Set global defaults with <code>NW_USER_DEFAULT</code> and <code>NW_PASSWORD_DEFAULT</code></li> <li>Override entire groups with group-level credentials</li> <li>Override specific devices with device-specific credentials</li> <li>Override everything with interactive authentication</li> </ul>"},{"location":"environment-variables/#troubleshooting","title":"Troubleshooting","text":""},{"location":"environment-variables/#default-username-not-found-in-environment","title":"\"Default username not found in environment\"","text":"<p>This error means <code>NW_USER_DEFAULT</code> is not set in any of the credential sources. Set it using one of the methods above.</p>"},{"location":"environment-variables/#default-password-not-found-in-environment","title":"\"Default password not found in environment\"","text":"<p>This error means <code>NW_PASSWORD_DEFAULT</code> is not set in any of the credential sources. Set it using one of the methods above.</p>"},{"location":"environment-variables/#device-specific-credentials-not-working","title":"Device-specific credentials not working","text":"<p>Check that:</p> <ol> <li>The environment variable name matches the device name in <code>devices.yml</code></li> <li>Hyphens in device names become underscores in environment variables</li> <li>Device names are converted to uppercase for environment variables</li> <li>The variables are exported in your current shell session</li> <li>Use the new <code>NW_</code> prefix, not the old <code>NT_</code> prefix</li> </ol>"},{"location":"environment-variables/#group-credentials-not-being-applied","title":"Group credentials not being applied","text":"<p>Check that:</p> <ol> <li>The group name in the environment variable matches exactly the group name in <code>groups.yml</code></li> <li>The device is actually a member of the group (check with <code>nw list groups</code>)</li> <li>Use the correct format: <code>NW_USER_GROUPNAME</code> and <code>NW_PASSWORD_GROUPNAME</code></li> <li>Group credentials have lower priority than device-specific credentials</li> </ol>"},{"location":"environment-variables/#verification","title":"Verification","text":"<p>You can verify your environment variables are set correctly:</p> <pre><code># Check if default credentials are set\necho \"Default user: $NW_USER_DEFAULT\"\necho \"Default password set: $(if [ -n \"$NW_PASSWORD_DEFAULT\" ]; then echo \"Yes\"; else echo \"No\"; fi)\"\n\n# Check device-specific credentials\necho \"SW-ACC1 user: $NW_USER_SW_ACC1\"\necho \"SW-ACC1 password set: $(if [ -n \"$NW_PASSWORD_SW_ACC1\" ]; then echo \"Yes\"; else echo \"No\"; fi)\"\n\n# Check group credentials\necho \"Access switches user: $NW_USER_ACCESS_SWITCHES\"\necho \"Access switches password set: $(if [ -n \"$NW_PASSWORD_ACCESS_SWITCHES\" ]; then echo \"Yes\"; else echo \"No\"; fi)\"\n</code></pre>"},{"location":"environment-variables/#migration-from-old-configuration","title":"Migration from Old Configuration","text":"<p>If you have an existing <code>devices.yml</code> with hardcoded credentials:</p> <ol> <li>Extract all <code>user</code> and <code>password</code> values from the file</li> <li>Set them as environment variables using the patterns above</li> <li>Remove or comment out the <code>user</code> and <code>password</code> lines from <code>devices.yml</code></li> <li>Test the configuration to ensure devices can still connect</li> </ol> <p>The updated configuration will automatically fall back to environment variables when device-specific credentials are not found in the YAML file.</p>"},{"location":"file_upload/","title":"File Upload Functionality for MikroTik Devices","text":"<p>This document describes the file upload functionality added to the <code>DeviceSession</code> class, which allows uploading files to MikroTik RouterOS devices using SCP (Secure Copy Protocol).</p>"},{"location":"file_upload/#features","title":"Features","text":"<ul> <li>Single Device Upload: Upload files to individual MikroTik devices</li> <li>Batch Upload: Upload files to multiple devices concurrently</li> <li>File Verification: Automatically verify successful uploads</li> <li>Error Handling: Comprehensive error handling and logging</li> <li>File Safety: Prevents file truncation with proper error checking</li> <li>Concurrent Processing: Support for uploading to multiple devices simultaneously</li> </ul>"},{"location":"file_upload/#usage","title":"Usage","text":""},{"location":"file_upload/#single-device-upload","title":"Single Device Upload","text":"<pre><code>from network_toolkit.config import load_config\nfrom network_toolkit.device import DeviceSession\nfrom pathlib import Path\n\n# Load configuration\nconfig = load_config(\"devices.yml\")\n\n# Upload a file to a single device\nwith DeviceSession(\"router1\", config) as session:\n    success = session.upload_file(\n        local_path=\"config_backup.rsc\",\n        remote_filename=\"uploaded_config.rsc\",  # Optional: custom remote name\n        verify_upload=True  # Optional: verify the upload\n    )\n\n    if success:\n        print(\"File uploaded successfully!\")\n    else:\n        print(\"File upload failed!\")\n</code></pre>"},{"location":"file_upload/#multiple-device-upload","title":"Multiple Device Upload","text":"<pre><code>from network_toolkit.device import DeviceSession\n\n# Upload to multiple devices concurrently\nresults = DeviceSession.upload_file_to_devices(\n    device_names=[\"router1\", \"router2\", \"switch1\"],\n    config=config,\n    local_path=\"firmware.npk\",\n    remote_filename=\"new_firmware.npk\",\n    verify_upload=True,\n    max_concurrent=3  # Upload to max 3 devices at once\n)\n\n# Check results\nfor device, success in results.items():\n    status = \"SUCCESS\" if success else \"FAILED\"\n    print(f\"{device}: {status}\")\n</code></pre>"},{"location":"file_upload/#method-reference","title":"Method Reference","text":""},{"location":"file_upload/#devicesessionupload_file","title":"<code>DeviceSession.upload_file()</code>","text":"<p>Upload a file to a single MikroTik device.</p> <p>Parameters: - <code>local_path</code> (str | Path): Path to the local file to upload - <code>remote_filename</code> (str | None, optional): Name for the file on the remote device. If None, uses the original filename - <code>verify_upload</code> (bool, default=True): Whether to verify the upload by checking if the file exists on the device</p> <p>Returns: - <code>bool</code>: True if upload was successful, False otherwise</p> <p>Raises: - <code>DeviceExecutionError</code>: If device is not connected or upload fails - <code>FileNotFoundError</code>: If local file does not exist - <code>ValueError</code>: If local path is not a file</p>"},{"location":"file_upload/#devicesessionupload_file_to_devices-static-method","title":"<code>DeviceSession.upload_file_to_devices()</code> (Static Method)","text":"<p>Upload a file to multiple devices concurrently.</p> <p>Parameters: - <code>device_names</code> (list[str]): List of device names to upload to - <code>config</code> (NetworkConfig): Network configuration containing device settings - <code>local_path</code> (str | Path): Path to the local file to upload - <code>remote_filename</code> (str | None, optional): Name for the file on remote devices - <code>verify_upload</code> (bool, default=True): Whether to verify uploads - <code>max_concurrent</code> (int, default=5): Maximum number of concurrent uploads</p> <p>Returns: - <code>dict[str, bool]</code>: Dictionary mapping device names to upload success status</p> <p>Raises: - <code>FileNotFoundError</code>: If local file does not exist - <code>ValueError</code>: If local path is not a file</p>"},{"location":"file_upload/#file-safety-features","title":"File Safety Features","text":""},{"location":"file_upload/#preventing-file-truncation","title":"Preventing File Truncation","text":"<p>The implementation includes several safety measures to prevent file truncation:</p> <ol> <li>File Existence Check: Verifies local file exists before attempting upload</li> <li>File Type Verification: Ensures the path points to a file (not directory)</li> <li>Size Logging: Logs file size before upload for verification</li> <li>Upload Verification: Optionally verifies file appears on remote device</li> <li>Error Handling: Proper exception handling with detailed error messages</li> </ol>"},{"location":"file_upload/#connection-management","title":"Connection Management","text":"<ul> <li>Transport Cleanup: Properly closes SFTP and transport connections</li> <li>Exception Safety: Uses try/finally blocks to ensure cleanup</li> <li>Authentication Handling: Specific handling for authentication failures</li> </ul>"},{"location":"file_upload/#error-handling","title":"Error Handling","text":"<p>The upload functionality provides comprehensive error handling:</p> <ul> <li>Authentication Errors: Specific handling for SSH authentication failures</li> <li>SSH Errors: General SSH connection and transfer errors</li> <li>File System Errors: Local file not found or permission issues</li> <li>Network Errors: Connection timeouts and network failures</li> <li>Verification Errors: Upload verification failures</li> </ul> <p>All errors are logged with appropriate detail levels and include context information.</p>"},{"location":"file_upload/#usage-examples","title":"Usage Examples","text":"<p>Here are common file upload scenarios:</p> <ol> <li>Single file upload with verification</li> <li>Batch upload to multiple devices</li> <li>RouterOS script file upload and execution</li> <li>Error handling patterns</li> </ol>"},{"location":"file_upload/#best-practices","title":"Best Practices","text":"<ol> <li>Always verify uploads for critical files</li> <li>Use appropriate concurrency limits to avoid overwhelming devices</li> <li>Check file sizes before uploading large files</li> <li>Handle errors gracefully in production code</li> <li>Use meaningful remote filenames for organization</li> <li>Monitor upload progress for large batch operations</li> </ol>"},{"location":"file_upload/#supported-file-types","title":"Supported File Types","text":"<p>The upload functionality supports any file type that MikroTik RouterOS can handle:</p> <ul> <li>Configuration files (<code>.rsc</code>)</li> <li>Firmware files (<code>.npk</code>)</li> <li>Certificate files (<code>.crt</code>, <code>.key</code>)</li> <li>Script files (<code>.rsc</code>)</li> <li>Backup files (<code>.backup</code>)</li> <li>Binary files and others</li> </ul>"},{"location":"file_upload/#dependencies","title":"Dependencies","text":"<p>The file upload functionality requires:</p> <ul> <li><code>paramiko</code>: For SCP/SFTP functionality</li> <li><code>scrapli</code>: For SSH connections and verification</li> <li><code>concurrent.futures</code>: For concurrent uploads (Python standard library)</li> <li><code>threading</code>: For thread-safe logging (Python standard library)</li> </ul>"},{"location":"file_upload/#logging","title":"Logging","text":"<p>The implementation provides detailed logging at different levels:</p> <ul> <li>INFO: Upload start/completion, verification results, batch summaries</li> <li>DEBUG: File sizes, detailed progress information</li> <li>WARNING: Non-critical issues like verification failures</li> <li>ERROR: Upload failures, authentication errors, critical issues</li> </ul> <p>Configure logging level as needed for your use case.</p>"},{"location":"getting-started/","title":"Quickstart","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install with uv or pip:</p> <pre><code>uv pip install networka\n# or\npip install networka\n</code></pre>"},{"location":"getting-started/#verify-installation","title":"Verify installation","text":"<pre><code>nw --help\nnw --version\n</code></pre>"},{"location":"getting-started/#minimal-configuration","title":"Minimal configuration","text":"<p>Create a devices file <code>config/devices/router1.yml</code>:</p> <pre><code>host: 192.0.2.10\ndevice_type: mikrotik_routeros\n</code></pre> <p>Run a command:</p> <pre><code>nw run router1 \"/system/identity/print\"\n</code></pre> <p>See User guide for configuration details.</p>"},{"location":"getting-started/#next-steps","title":"Next steps","text":"<ul> <li>Define more devices and groups \u2192 Configuration</li> <li>Prefer YAML \u2192 Configuration (YAML)</li> <li>Optionally import from spreadsheets \u2192 Configuration (CSV)</li> <li>Learn how to run common operations \u2192 Running commands</li> <li>Control formatting and capture outputs \u2192 Output modes and Results</li> <li>Troubleshooting connection/auth issues \u2192 Troubleshooting</li> </ul>"},{"location":"interactive-credentials/","title":"Interactive Credentials Feature","text":""},{"location":"interactive-credentials/#overview","title":"Overview","text":"<p>The Network Toolkit now supports interactive credential input through the <code>--interactive-auth</code> (or <code>-i</code>) flag, providing a secure way to enter credentials at runtime without storing them in environment variables, .env files, or configuration files.</p>"},{"location":"interactive-credentials/#usage","title":"Usage","text":"<p>Add the <code>--interactive-auth</code> or <code>-i</code> flag to any command that connects to devices:</p> <pre><code># Device information with interactive auth\nnw info sw-acc1 --interactive-auth\n\n# Execute commands with interactive auth\nnw run sw-acc1 '/system/identity/print' --interactive-auth\n\n# Multiple devices with interactive auth (short flag)\nnw run sw-acc1,sw-acc2 '/system/clock/print' -i\n\n# Group operations with interactive auth\nnw run access_switches system_info --interactive-auth\n</code></pre>"},{"location":"interactive-credentials/#security-benefits","title":"Security Benefits","text":"<ul> <li>No credential storage: Credentials exist only in memory during execution</li> <li>Hidden password input: Password entry is masked (not echoed to terminal)</li> <li>Override priority: Interactive credentials override environment variables and config files</li> <li>Session-only: Credentials are not saved or cached anywhere</li> </ul>"},{"location":"interactive-credentials/#implementation-details","title":"Implementation Details","text":""},{"location":"interactive-credentials/#core-components","title":"Core Components","text":"<ol> <li><code>src/network_toolkit/common/credentials.py</code> - New module providing:</li> <li><code>InteractiveCredentials</code> - Type-safe credential container (NamedTuple)</li> <li><code>prompt_for_credentials()</code> - Secure credential input using getpass</li> <li> <p><code>confirm_credentials()</code> - Optional credential verification</p> </li> <li> <p>Enhanced Configuration System - <code>src/network_toolkit/config.py</code>:</p> </li> <li><code>get_device_connection_params()</code> now accepts credential overrides</li> <li> <p>Maintains compatibility with existing credential sources</p> </li> <li> <p>Updated Device Session - <code>src/network_toolkit/device.py</code>:</p> </li> <li><code>DeviceSession</code> constructor accepts username/password overrides</li> <li> <p>Credential override parameters passed to connection logic</p> </li> <li> <p>CLI Integration - Commands updated with <code>--interactive-auth</code> flag:</p> </li> <li><code>info</code> command - Shows device information with interactive auth</li> <li><code>run</code> command - Executes commands with interactive auth support</li> </ol>"},{"location":"interactive-credentials/#credential-resolution-priority","title":"Credential Resolution Priority","text":"<ol> <li>Interactive credentials (highest priority) - When <code>--interactive-auth</code> is used</li> <li>Environment variables - <code>NW_USER_DEFAULT</code>, <code>NW_PASSWORD_DEFAULT</code>, device-specific overrides</li> <li>Configuration file - Default credentials in <code>devices.yml</code> (discouraged)</li> </ol>"},{"location":"interactive-credentials/#error-handling","title":"Error Handling","text":"<ul> <li>Empty username/password: Raises <code>typer.BadParameter</code> with descriptive message</li> <li>KeyboardInterrupt: Properly propagated to allow clean cancellation</li> <li>Connection failures: Existing error handling maintained</li> </ul>"},{"location":"interactive-credentials/#testing","title":"Testing","text":""},{"location":"interactive-credentials/#test-coverage","title":"Test Coverage","text":"<ul> <li>Unit tests: <code>tests/test_credentials.py</code> - 14 tests covering all credential functionality</li> <li>Integration tests: Existing CLI and config tests continue to pass</li> <li>Validation: All tests pass, ensuring no regressions</li> </ul>"},{"location":"interactive-credentials/#test-categories","title":"Test Categories","text":"<ol> <li>InteractiveCredentials class: Immutability, equality, creation</li> <li>Credential prompting: Basic prompting, defaults, error conditions</li> <li>Credential confirmation: Accept/reject flow, keyboard interrupts</li> <li>Integration scenarios: Full workflow, rejection handling</li> <li>Error handling: Exception propagation, validation</li> </ol>"},{"location":"interactive-credentials/#examples","title":"Examples","text":""},{"location":"interactive-credentials/#basic-usage","title":"Basic Usage","text":"<pre><code># Info command with interactive auth\n$ nw info sw-acc1 --interactive-auth\nInteractive authentication mode enabled\nUsername [admin]: admin\nPassword: ********\nWill use username: admin\n\nDevice: sw-acc1\n\u251c\u2500 Connection: Not tested (use --check for live connection)\n\u251c\u2500 Host: 192.168.1.10\n\u251c\u2500 Port: 22\n\u251c\u2500 Credentials: Interactive (admin)\n\u2514\u2500 Groups: access_switches\n</code></pre>"},{"location":"interactive-credentials/#run-command-with-interactive-auth","title":"Run Command with Interactive Auth","text":"<pre><code># Execute command with interactive auth\n$ nw run sw-acc1 '/system/identity/print' -i\nInteractive authentication mode enabled\nUsername [admin]: myuser\nPassword: ********\nWill use username: myuser\n\nExecuting on sw-acc1: /system/identity/print\nname=\"MikroTik\"\n\u2713 Command completed successfully on sw-acc1\n</code></pre>"},{"location":"interactive-credentials/#multiple-devices","title":"Multiple Devices","text":"<pre><code># Run on multiple devices\n$ nw run sw-acc1,sw-acc2 '/system/clock/print' --interactive-auth\nInteractive authentication mode enabled\nUsername [admin]: admin\nPassword: ********\nWill use username: admin\n\nExecuting on sw-acc1,sw-acc2: /system/clock/print\n\u2713 Command completed successfully on sw-acc1\n\u2713 Command completed successfully on sw-acc2\n</code></pre>"},{"location":"interactive-credentials/#implementation-notes","title":"Implementation Notes","text":""},{"location":"interactive-credentials/#type-safety","title":"Type Safety","text":"<p>All functions use proper type annotations with Python 3.11+ typing features:</p> <pre><code>def prompt_for_credentials(\n    username_prompt: str = \"Username\",\n    password_prompt: str = \"Password\",\n    default_username: str | None = None,\n) -&gt; InteractiveCredentials:\n</code></pre>"},{"location":"interactive-credentials/#async-compatibility","title":"Async Compatibility","text":"<p>The credential system integrates seamlessly with the existing async device session architecture:</p> <pre><code># Credentials are passed as parameters to async context managers\nasync with DeviceSession(\n    device_name,\n    config,\n    username_override=creds.username,\n    password_override=creds.password\n) as session:\n    result = await session.execute_command(command)\n</code></pre>"},{"location":"interactive-credentials/#backward-compatibility","title":"Backward Compatibility","text":"<ul> <li>All existing functionality remains unchanged</li> <li>Environment variables and config files still work as before</li> <li>Interactive auth is purely additive - no breaking changes</li> <li>Existing scripts and automation continue to work</li> </ul>"},{"location":"interactive-credentials/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements for future versions:</p> <ol> <li>Credential caching: Optional session-based credential caching</li> <li>SSH key support: Interactive SSH key selection and passphrase entry</li> <li>Multi-factor auth: Support for 2FA/MFA prompts</li> <li>Credential managers: Integration with system credential stores</li> <li>Role-based auth: Different credentials for different device roles</li> </ol>"},{"location":"interactive-credentials/#conclusion","title":"Conclusion","text":"<p>The interactive credentials feature provides a secure, user-friendly way to handle authentication in the Network Toolkit while maintaining full backward compatibility and following security best practices. The implementation is well-tested, type-safe, and follows the project's architectural patterns.</p>"},{"location":"ip-address-support/","title":"IP Address Support","text":"<p>Networka lets you target devices directly by IP address (single or comma-separated list) without predefining them in configuration files.</p>"},{"location":"ip-address-support/#usage-examples","title":"Usage examples","text":""},{"location":"ip-address-support/#single-ip-address","title":"Single IP address","text":"<pre><code># Run a command\nnw run 192.168.1.1 \"/system/clock/print\" --platform mikrotik_routeros\n\n# SSH to device by IP\nnw ssh 192.168.1.1 --platform mikrotik_routeros\n\n# Show device info by IP\nnw info 192.168.1.1 --platform mikrotik_routeros\n</code></pre>"},{"location":"ip-address-support/#multiple-ip-addresses","title":"Multiple IP addresses","text":"<pre><code># Execute command on multiple IPs (comma-separated, no spaces)\nnw run \"192.168.1.1,192.168.1.2,192.168.1.3\" \"/system/clock/print\" --platform mikrotik_routeros\n\n# SSH to multiple IPs (opens tmux with multiple panes)\nnw ssh \"192.168.1.1,192.168.1.2\" --platform mikrotik_routeros\n\n# Mix IPs and configured device names\nnw run \"192.168.1.1,sw-acc1,192.168.1.2\" \"/system/clock/print\" --platform mikrotik_routeros\n</code></pre>"},{"location":"ip-address-support/#with-custom-port","title":"With custom port","text":"<pre><code>nw run 192.168.1.1 \"/system/clock/print\" --platform mikrotik_routeros --port 2222\n</code></pre>"},{"location":"ip-address-support/#interactive-authentication","title":"Interactive authentication","text":"<pre><code># Prompt for credentials at runtime\nnw run 192.168.1.1 \"/system/clock/print\" --platform mikrotik_routeros --interactive-auth\n</code></pre>"},{"location":"ip-address-support/#required-parameters","title":"Required parameters","text":"<p>When using IP addresses, you must specify:</p> <ul> <li><code>--platform</code>: The device type (network driver), e.g. <code>mikrotik_routeros</code>, <code>cisco_iosxe</code>.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>--port</code>: SSH port (defaults to 22)</li> <li><code>--interactive-auth</code>: Prompt for username/password instead of environment</li> <li><code>--transport</code>: Transport driver to use for the session; defaults to configuration or Scrapli. Note: nornir-netmiko is not yet supported but coming soon.</li> </ul>"},{"location":"ip-address-support/#supported-platforms","title":"Supported platforms","text":"<ul> <li>mikrotik_routeros \u2014 MikroTik RouterOS</li> <li>cisco_iosxe \u2014 Cisco IOS-XE</li> <li>cisco_iosxr \u2014 Cisco IOS-XR</li> <li>cisco_nxos \u2014 Cisco NX-OS</li> <li>juniper_junos \u2014 Juniper JunOS</li> <li>arista_eos \u2014 Arista EOS</li> <li>linux \u2014 Linux SSH</li> </ul>"},{"location":"ip-address-support/#authentication","title":"Authentication","text":"<p>IP-based connections use the same authentication as configured devices:</p> <ol> <li>Environment variables: <code>NW_USER_DEFAULT</code> and <code>NW_PASSWORD_DEFAULT</code></li> <li>Interactive mode with <code>--interactive-auth</code></li> <li>SSH keys (via the underlying transport)</li> </ol>"},{"location":"ip-address-support/#error-handling","title":"Error handling","text":"<p>If you omit the platform when using IPs:</p> <pre><code>Error: When using IP addresses, --platform is required\nSupported platforms:\n  mikrotik_routeros: MikroTik RouterOS\n  cisco_iosxe: Cisco IOS-XE\n  cisco_iosxr: Cisco IOS-XR\n  cisco_nxos: Cisco NX-OS\n  juniper_junos: Juniper JunOS\n  arista_eos: Arista EOS\n  linux: Linux SSH\n</code></pre>"},{"location":"ip-address-support/#implementation-details","title":"Implementation details","text":"<p>When IPs are used as the target:</p> <ol> <li>Networka detects the IPs in the target argument</li> <li>Creates temporary devices with generated names (e.g. <code>ip_192_168_1_1</code>)</li> <li>Applies the specified <code>--platform</code> for connection parameters</li> <li>Merges with any configured devices so you can mix both</li> <li>Executes commands as usual and supports results storage</li> </ol>"},{"location":"multi-vendor-support/","title":"Multi-Vendor Support Documentation","text":""},{"location":"multi-vendor-support/#overview","title":"Overview","text":"<p>The Network Toolkit now supports multiple network vendors through a flexible, vendor-specific command sequence architecture. This allows you to manage devices from different vendors using their native command syntax while maintaining a unified interface.</p>"},{"location":"multi-vendor-support/#supported-vendors","title":"Supported Vendors","text":""},{"location":"multi-vendor-support/#currently-implemented","title":"Currently Implemented","text":"<ul> <li>MikroTik RouterOS (<code>mikrotik_routeros</code>) - Primary focus, fully featured</li> <li>Cisco IOS-XE (<code>cisco_iosxe</code>) - Switches and routers</li> <li>Cisco NX-OS (<code>cisco_nxos</code>) - Data center switches</li> <li>Arista EOS (<code>arista_eos</code>) - Data center and campus switches</li> <li>Juniper JunOS (<code>juniper_junos</code>) - Enterprise switches and routers</li> </ul>"},{"location":"multi-vendor-support/#extensibility","title":"Extensibility","text":"<p>The architecture is designed to easily support additional vendors by:</p> <ol> <li>Adding new vendor sequence directories</li> <li>Creating vendor-specific command mappings</li> <li>Updating the platform configuration</li> </ol>"},{"location":"multi-vendor-support/#architecture","title":"Architecture","text":""},{"location":"multi-vendor-support/#vendor-specific-sequences","title":"Vendor-Specific Sequences","text":"<p>Sequences are organized by vendor platform following Scrapli naming conventions:</p> <pre><code>config/sequences/\n\u251c\u2500\u2500 mikrotik_routeros/\n\u2502   \u2514\u2500\u2500 common.yml\n\u251c\u2500\u2500 cisco_iosxe/\n\u2502   \u2514\u2500\u2500 common.yml\n\u251c\u2500\u2500 cisco_nxos/\n\u2502   \u2514\u2500\u2500 common.yml\n\u251c\u2500\u2500 arista_eos/\n\u2502   \u2514\u2500\u2500 common.yml\n\u2514\u2500\u2500 juniper_junos/\n    \u2514\u2500\u2500 common.yml\n</code></pre>"},{"location":"multi-vendor-support/#sequence-resolution-order","title":"Sequence Resolution Order","text":"<p>When executing a sequence, the toolkit follows this priority order:</p> <ol> <li>Global sequences (highest priority) - Defined in <code>sequences.yml</code></li> <li>Vendor-specific sequences - Based on device's <code>device_type</code></li> <li>Device-specific sequences (lowest priority) - Defined in device configuration</li> </ol>"},{"location":"multi-vendor-support/#device-configuration","title":"Device Configuration","text":"<p>Each device must specify its vendor type:</p> <pre><code>devices:\n  mikrotik-switch:\n    host: \"10.0.1.10\"\n    device_type: \"mikrotik_routeros\" # Determines which sequences to use\n    # ... other config\n\n  cisco-switch:\n    host: \"10.0.1.20\"\n    device_type: \"cisco_iosxe\" # Uses Cisco IOS-XE sequences\n    # ... other config\n</code></pre>"},{"location":"multi-vendor-support/#command-sequences","title":"Command Sequences","text":""},{"location":"multi-vendor-support/#common-sequences-across-vendors","title":"Common Sequences Across Vendors","text":"<p>All vendors support these standardized sequence names with vendor-appropriate commands:</p> <ul> <li><code>system_info</code> - Complete system information gathering</li> <li><code>health_check</code> - Basic health monitoring</li> <li><code>quick_status</code> - Quick device status overview</li> <li><code>interface_status</code> - Detailed interface information</li> <li><code>network_overview</code> - Network configuration overview</li> <li><code>security_audit</code> - Security configuration review</li> <li><code>connectivity_test</code> - Network connectivity testing</li> </ul>"},{"location":"multi-vendor-support/#vendor-specific-command-examples","title":"Vendor-Specific Command Examples","text":""},{"location":"multi-vendor-support/#mikrotik-routeros","title":"MikroTik RouterOS","text":"<pre><code>system_info:\n  commands:\n    - \"/system/identity/print\"\n    - \"/system/resource/print\"\n    - \"/system/routerboard/print\"\n</code></pre>"},{"location":"multi-vendor-support/#cisco-ios-xe","title":"Cisco IOS-XE","text":"<pre><code>system_info:\n  commands:\n    - \"show version\"\n    - \"show inventory\"\n    - \"show environment all\"\n</code></pre>"},{"location":"multi-vendor-support/#arista-eos","title":"Arista EOS","text":"<pre><code>system_info:\n  commands:\n    - \"show version\"\n    - \"show inventory\"\n    - \"show environment\"\n</code></pre>"},{"location":"multi-vendor-support/#configuration","title":"Configuration","text":""},{"location":"multi-vendor-support/#platform-configuration","title":"Platform Configuration","text":"<p>The <code>sequences.yml</code> file defines vendor platform mappings:</p> <pre><code>vendor_platforms:\n  mikrotik_routeros:\n    description: \"MikroTik RouterOS devices\"\n    sequence_path: \"sequences/mikrotik_routeros\"\n    default_files: [\"common.yml\"]\n\n  cisco_iosxe:\n    description: \"Cisco IOS-XE devices\"\n    sequence_path: \"sequences/cisco_iosxe\"\n    default_files: [\"common.yml\"]\n</code></pre>"},{"location":"multi-vendor-support/#device-groups-by-vendor","title":"Device Groups by Vendor","text":"<p>You can create vendor-specific device groups:</p> <pre><code>groups:\n  cisco_devices:\n    description: \"All Cisco devices (IOS-XE and NX-OS)\"\n    match_tags:\n      - \"cisco\"\n\n  mikrotik_devices:\n    description: \"All MikroTik devices\"\n    match_tags:\n      - \"mikrotik\"\n</code></pre>"},{"location":"multi-vendor-support/#usage-examples","title":"Usage Examples","text":""},{"location":"multi-vendor-support/#running-vendor-specific-sequences","title":"Running Vendor-Specific Sequences","text":"<pre><code># Run system_info on a MikroTik device (uses MikroTik commands)\nnw run sw-mikrotik system_info\n\n# Run system_info on a Cisco device (uses Cisco commands)\nnw run sw-cisco system_info\n\n# Run on a group with mixed vendors (automatically uses correct commands)\nnw run all_switches health_check\n</code></pre>"},{"location":"multi-vendor-support/#listing-sequences-by-vendor","title":"Listing Sequences by Vendor","text":"<pre><code># List all sequences for all vendors\nnw list sequences\n\n# List sequences for a specific vendor\nnw list sequences --vendor mikrotik_routeros\n\n# List sequences by category\nnw list sequences --category monitoring\n\n# Verbose output with command details\nnw list sequences --vendor cisco_iosxe --verbose\n</code></pre>"},{"location":"multi-vendor-support/#managing-multi-vendor-groups","title":"Managing Multi-Vendor Groups","text":"<pre><code># List devices by vendor\nnw list devices | grep cisco\nnw list devices | grep mikrotik\n\n# Run operations on vendor-specific groups\nnw run cisco_devices health_check\nnw run mikrotik_devices system_info\n</code></pre>"},{"location":"multi-vendor-support/#adding-new-vendors","title":"Adding New Vendors","text":""},{"location":"multi-vendor-support/#step-1-create-vendor-directory","title":"Step 1: Create Vendor Directory","text":"<pre><code>mkdir -p config/sequences/new_vendor\n</code></pre>"},{"location":"multi-vendor-support/#step-2-create-sequence-file","title":"Step 2: Create Sequence File","text":"<p>Create <code>config/sequences/new_vendor/common.yml</code>:</p> <pre><code>sequences:\n  system_info:\n    description: \"System information for New Vendor\"\n    category: \"information\"\n    timeout: 60\n    commands:\n      - \"show system\"\n      - \"show version\"\n      # ... vendor-specific commands\n</code></pre>"},{"location":"multi-vendor-support/#step-3-update-platform-configuration","title":"Step 3: Update Platform Configuration","text":"<p>Add to <code>sequences.yml</code>:</p> <pre><code>vendor_platforms:\n  new_vendor:\n    description: \"New Vendor devices\"\n    sequence_path: \"sequences/new_vendor\"\n    default_files: [\"common.yml\"]\n</code></pre>"},{"location":"multi-vendor-support/#step-4-configure-devices","title":"Step 4: Configure Devices","text":"<p>Add devices with the new vendor type:</p> <pre><code>devices:\n  new-device:\n    device_type: \"new_vendor\"\n    # ... other configuration\n</code></pre>"},{"location":"multi-vendor-support/#best-practices","title":"Best Practices","text":""},{"location":"multi-vendor-support/#1-consistent-sequence-names","title":"1. Consistent Sequence Names","text":"<p>Use standardized sequence names across vendors for common operations:</p> <ul> <li><code>system_info</code>, <code>health_check</code>, <code>quick_status</code></li> <li><code>interface_status</code>, <code>network_overview</code></li> <li><code>security_audit</code>, <code>connectivity_test</code></li> </ul>"},{"location":"multi-vendor-support/#2-vendor-specific-categories","title":"2. Vendor-Specific Categories","text":"<p>Use consistent categories:</p> <ul> <li><code>information</code> - Data gathering</li> <li><code>monitoring</code> - Health checks</li> <li><code>troubleshooting</code> - Diagnostic commands</li> <li><code>security</code> - Security auditing</li> </ul>"},{"location":"multi-vendor-support/#3-command-timeouts","title":"3. Command Timeouts","text":"<p>Set appropriate timeouts for different vendors:</p> <ul> <li>Some vendors may need longer timeouts for complex commands</li> <li>Consider device performance characteristics</li> </ul>"},{"location":"multi-vendor-support/#4-error-handling","title":"4. Error Handling","text":"<p>Different vendors may have different:</p> <ul> <li>Command syntax variations</li> <li>Error message formats</li> <li>Connection characteristics</li> </ul>"},{"location":"multi-vendor-support/#5-testing","title":"5. Testing","text":"<p>Always test new vendor sequences:</p> <pre><code># Test individual commands first\nnw run new-device \"show version\"\n\n# Then test sequences\nnw run new-device system_info\n</code></pre>"},{"location":"multi-vendor-support/#migration-from-single-vendor","title":"Migration from Single-Vendor","text":""},{"location":"multi-vendor-support/#existing-installations","title":"Existing Installations","text":"<ul> <li>Legacy <code>sequences.yml</code> configurations continue to work</li> <li>Gradual migration path available</li> <li>No breaking changes to existing functionality</li> </ul>"},{"location":"multi-vendor-support/#migration-steps","title":"Migration Steps","text":"<ol> <li>Move existing sequences to <code>sequences/mikrotik_routeros/common.yml</code></li> <li>Update <code>sequences.yml</code> with vendor platform definitions</li> <li>Add new vendor sequences as needed</li> <li>Update device configurations with explicit <code>device_type</code></li> </ol>"},{"location":"multi-vendor-support/#troubleshooting","title":"Troubleshooting","text":""},{"location":"multi-vendor-support/#common-issues","title":"Common Issues","text":""},{"location":"multi-vendor-support/#sequence-not-found","title":"Sequence Not Found","text":"<pre><code>Error: Sequence 'system_info' not found for device type\n</code></pre> <p>Solution: Ensure the device's <code>device_type</code> matches a configured vendor platform.</p>"},{"location":"multi-vendor-support/#wrong-commands-executed","title":"Wrong Commands Executed","text":"<p>Issue: Device receives commands for wrong vendor Solution: Verify <code>device_type</code> in device configuration matches actual device vendor.</p>"},{"location":"multi-vendor-support/#missing-vendor-sequences","title":"Missing Vendor Sequences","text":"<p>Issue: No sequences found for vendor Solution: Check that vendor sequence files exist and are properly formatted.</p>"},{"location":"multi-vendor-support/#debug-commands","title":"Debug Commands","text":"<pre><code># Check device configuration\nnw info device-name\n\n# List available sequences for device's vendor\nnw list sequences --vendor cisco_iosxe\n\n# Test with verbose logging\nnw --verbose sequence device-name system_info\n</code></pre>"},{"location":"multi-vendor-support/#future-enhancements","title":"Future Enhancements","text":""},{"location":"multi-vendor-support/#planned-features","title":"Planned Features","text":"<ul> <li>Dynamic sequence loading - Load sequences based on device capabilities</li> <li>Vendor auto-detection - Automatically detect vendor from device responses</li> <li>Command translation - Translate common operations between vendor syntaxes</li> <li>Vendor-specific drivers - Enhanced connection handling per vendor</li> </ul>"},{"location":"multi-vendor-support/#community-contributions","title":"Community Contributions","text":"<ul> <li>Submit vendor-specific sequences</li> <li>Report vendor compatibility issues</li> <li>Contribute new vendor support</li> <li>Improve existing command mappings</li> </ul>"},{"location":"output-modes/","title":"Output modes","text":"<p>Control colors and formatting globally with <code>general.output_mode</code>.</p> <ul> <li>default: Adaptive styling (Rich defaults)</li> <li>light: Colors optimized for light terminals</li> <li>dark: Colors optimized for dark terminals</li> <li>no-color: Structured output without ANSI colors</li> <li>raw: Minimal formatting for scripts/automation</li> </ul> <p>Precedence (highest to lowest): 1) CLI flag: <code>--output-mode</code> 2) Environment: <code>NW_OUTPUT_MODE</code> 3) Config: <code>general.output_mode</code></p> <p>Examples:</p> <pre><code>nw info device1 --output-mode raw\nexport NW_OUTPUT_MODE=light &amp;&amp; nw run device1 system_info\n</code></pre> <p>Config snippet:</p> <pre><code>general:\n  output_mode: dark\n</code></pre>"},{"location":"platform-compatibility/","title":"Platform Compatibility","text":"<p>Networka provides comprehensive cross-platform support, ensuring network engineers can use the same powerful automation tools regardless of their operating system.</p>"},{"location":"platform-compatibility/#supported-platforms","title":"Supported Platforms","text":""},{"location":"platform-compatibility/#operating-systems","title":"Operating Systems","text":"<ul> <li>Linux: All major distributions (Ubuntu, RHEL, CentOS, Debian, etc.)</li> <li>macOS: Intel and Apple Silicon (M1/M2/M3) processors</li> <li>Windows: Windows 10/11 (x64)</li> </ul>"},{"location":"platform-compatibility/#python-versions","title":"Python Versions","text":"<ul> <li>Python 3.11: Full support</li> <li>Python 3.12: Full support</li> <li>Python 3.13: Full support</li> </ul>"},{"location":"platform-compatibility/#tested-configurations","title":"Tested Configurations","text":"<p>All combinations have been thoroughly tested using automated CI/CD pipelines:</p> Platform Python 3.11 Python 3.12 Python 3.13 Ubuntu Latest \u2705 \u2705 \u2705 macOS Latest \u2705 \u2705 \u2705 Windows Latest \u2705 \u2705 \u2705"},{"location":"platform-compatibility/#installation-notes","title":"Installation Notes","text":""},{"location":"platform-compatibility/#linux","title":"Linux","text":"<ul> <li>No additional system dependencies required</li> <li>Works with all major package managers (apt, yum, dnf, pacman)</li> <li>Container-ready for Docker deployments</li> </ul>"},{"location":"platform-compatibility/#macos","title":"macOS","text":"<ul> <li>Native support for both Intel and Apple Silicon</li> <li>All cryptographic dependencies include universal binaries</li> <li>Homebrew integration available</li> </ul>"},{"location":"platform-compatibility/#windows","title":"Windows","text":"<ul> <li>Scrapli (default transport) is not officially supported on native Windows. It may work via Paramiko or ssh2-python, but the strongly recommended setup is WSL2 (Ubuntu) to provide a POSIX environment.</li> <li>Pre-built wheels for all C extensions</li> <li>No Visual Studio Build Tools required</li> <li>PowerShell and Command Prompt compatible (best-effort); WSL2 is preferred</li> </ul>"},{"location":"platform-compatibility/#dependencies","title":"Dependencies","text":"<p>All platform-critical dependencies are thoroughly tested:</p>"},{"location":"platform-compatibility/#networking-libraries","title":"Networking Libraries","text":"<ul> <li>scrapli: Multi-vendor SSH automation</li> <li>asyncssh: Async SSH implementation</li> <li>paramiko: SSH2 protocol library</li> </ul>"},{"location":"platform-compatibility/#cryptography","title":"Cryptography","text":"<ul> <li>cryptography: Modern cryptographic recipes</li> <li>bcrypt: Password hashing</li> <li>pynacl: Networking and cryptography</li> </ul>"},{"location":"platform-compatibility/#performance","title":"Performance","text":"<ul> <li>uvloop: High-performance event loop (Linux/macOS)</li> <li>asyncio: Cross-platform async support</li> </ul>"},{"location":"platform-compatibility/#known-platform-differences","title":"Known Platform Differences","text":""},{"location":"platform-compatibility/#path-handling","title":"Path Handling","text":"<ul> <li>Automatic path normalization across platforms</li> <li>Windows drive letter support</li> <li>POSIX-style paths on Linux/macOS</li> </ul>"},{"location":"platform-compatibility/#terminal-colors","title":"Terminal Colors","text":"<ul> <li>Rich terminal support on all platforms</li> <li>Windows Terminal and PowerShell color support</li> <li>Graceful fallback for legacy terminals</li> </ul>"},{"location":"platform-compatibility/#ssh-key-management","title":"SSH Key Management","text":"<ul> <li>Platform-native SSH key locations</li> <li>Windows OpenSSH integration</li> <li>macOS Keychain integration available</li> </ul>"},{"location":"platform-compatibility/#troubleshooting","title":"Troubleshooting","text":""},{"location":"platform-compatibility/#windows-specific-issues","title":"Windows-Specific Issues","text":"<p>If you encounter permission issues on Windows:</p> <pre><code># Run PowerShell as Administrator\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>"},{"location":"platform-compatibility/#macos-specific-issues","title":"macOS-Specific Issues","text":"<p>For macOS Gatekeeper warnings:</p> <pre><code># Trust the Python installation\nxattr -d com.apple.quarantine /usr/local/bin/python3\n</code></pre>"},{"location":"platform-compatibility/#linux-specific-issues","title":"Linux-Specific Issues","text":"<p>For older distributions, ensure Python 3.11+ is available:</p> <pre><code># Ubuntu/Debian\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.11\n\n# RHEL/CentOS\nsudo dnf install python3.11\n</code></pre>"},{"location":"platform-compatibility/#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Relative performance across platforms (Linux = 100%):</p> Platform SSH Connection Command Execution File Transfer Linux 100% 100% 100% macOS 98% 99% 97% Windows 95% 96% 94% <p>Note: Performance differences are minimal and within acceptable ranges for network automation tasks.</p>"},{"location":"platform-compatibility/#container-support","title":"Container Support","text":""},{"location":"platform-compatibility/#docker","title":"Docker","text":"<pre><code>FROM python:3.12-slim\nRUN pip install git+https://github.com/narrowin/networka.git\n</code></pre>"},{"location":"platform-compatibility/#podman","title":"Podman","text":"<pre><code>podman run -it python:3.12-slim\npip install git+https://github.com/narrowin/networka.git\n</code></pre>"},{"location":"platform-compatibility/#cicd-integration","title":"CI/CD Integration","text":"<p>Networka is tested across platforms using GitHub Actions:</p> <ul> <li>Ubuntu runners for Linux testing</li> <li>macOS runners for Apple platform testing</li> <li>Windows runners for Microsoft platform testing</li> </ul> <p>This ensures every release works reliably across all supported platforms.</p>"},{"location":"results/","title":"Results","text":"<p>Networka stores command results under a timestamped directory by default.</p> <ul> <li>Root directory: <code>general.results_dir</code> (default: <code>./results</code>)</li> <li>Auto-created per run: <code>YYYYMMDD_HHMMSS/</code></li> <li>Supports multiple formats when <code>--store-results</code> is used</li> </ul> <p>Examples:</p> <pre><code>nw run sw-acc1 health_check --store-results\nnw run sw-acc1 system_info --store-results --results-format json\nnw run group1 check --results-dir ./maintenance-2025-08\n</code></pre> <p>Config snippet:</p> <pre><code>general:\n  results_dir: ./results\n</code></pre> <p>Notes: - Filenames and subfolders are derived from device/group and command/sequence names. - Use <code>--results-format</code> to control serialization (e.g., json, text). - Results are safe to check into version control if they don't contain secrets.</p>"},{"location":"running-commands/","title":"Running commands","text":"<p>Common operations you\u2019ll use daily.</p>"},{"location":"running-commands/#inspect-targets","title":"Inspect targets","text":"<pre><code># Device info\nnw info device1\n# Group info\nnw info access_switches\n# Sequence info\nnw info health_check\n</code></pre>"},{"location":"running-commands/#run-commands","title":"Run commands","text":"<pre><code># Single command on a device\nnw run device1 \"/system/resource/print\"\n\n# Run on a group\nnw run access_switches \"show version\"\n\n# Multiple targets\nnw run device1,access_switches \"/system/identity/print\"\n</code></pre>"},{"location":"running-commands/#run-sequences","title":"Run sequences","text":"<pre><code># Predefined sequence on a device\nnw run device1 health_check\n\n# On a group\nnw run core_switches audit\n</code></pre>"},{"location":"running-commands/#upload-and-download","title":"Upload and download","text":"<pre><code># Upload a file to a device\nnw upload device1 firmware.npk\n\n# Download a file from a device\nnw download device1 config.backup\n</code></pre>"},{"location":"running-commands/#results-and-formatting","title":"Results and formatting","text":"<pre><code># Save results\nnw run device1 system_info --store-results\n\n# Choose format and target directory\nnw run device1 system_info --store-results --results-format json --results-dir ./maintenance\n\n# Adjust output styling\nnw info device1 --output-mode raw\n</code></pre>"},{"location":"running-commands/#next-steps","title":"Next steps","text":"<ul> <li>See all flags and subcommands \u2192 CLI reference</li> <li>Store and inspect outputs \u2192 Results</li> <li>Customize CLI styling \u2192 Output modes</li> <li>Back up devices across vendors \u2192 Backups</li> </ul>"},{"location":"shell-completion/","title":"Shell Completions for nw","text":"<p>This directory contains dynamic shell completions for the <code>nw</code> (Networka) command. Supported shells:</p> <ul> <li>Bash (Linux/macOS)</li> <li>Zsh (Linux/macOS)</li> </ul>"},{"location":"shell-completion/#features","title":"Features","text":"<p>The completions provide intelligent suggestions powered by the CLI itself:</p> <ul> <li>Commands: All nw subcommands (info, run, list-*, etc.)</li> <li>Device names: Read from your active configuration</li> <li>Device groups: From the <code>device_groups</code> section</li> <li>Command sequences: Global, vendor, and device-specific sequences</li> <li>Sequence groups: Predefined groups of command sequences</li> <li>Tags: Available tags for tag-based operations</li> <li>File paths: Context-aware file completion for config files, firmware, etc.</li> <li>Options: All command-line options and flags</li> </ul>"},{"location":"shell-completion/#installation","title":"Installation","text":""},{"location":"shell-completion/#automatic-installation-recommended","title":"Automatic Installation (Recommended)","text":"<p>Use the provided installation script (supports bash/zsh):</p> <pre><code># Install system-wide (requires sudo)\n./install_completion.sh --system\n\n# Install for current user only\n./install_completion.sh --user\n\n# Show manual installation instructions\n./install_completion.sh --manual\n\n# Show help\n./install_completion.sh --help\n</code></pre>"},{"location":"shell-completion/#manual-installation-per-shell","title":"Manual Installation (per shell)","text":""},{"location":"shell-completion/#option-1-source-in-your-shell-profile","title":"Option 1: Source in your shell profile","text":"<p>Add this line to your <code>~/.bashrc</code>, <code>~/.bash_profile</code>, or <code>~/.profile</code>:</p> <pre><code>source \"/path/to/bash_completion_nw.sh\"\n</code></pre> <p>For zsh, copy <code>zsh_completion_nw.zsh</code> to one of your <code>$fpath</code> directories as <code>_nw</code>, e.g.:</p> <pre><code>mkdir -p ~/.zsh/completions\ncp zsh_completion_nw.zsh ~/.zsh/completions/_nw\necho 'fpath+=$HOME/.zsh/completions' &gt;&gt; ~/.zshrc\necho 'autoload -Uz compinit &amp;&amp; compinit' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"shell-completion/#option-2-system-wide-installation-bash","title":"Option 2: System-wide installation (bash)","text":"<p>Copy the completion file to the bash completion directory:</p> <pre><code># Most Linux distributions\nsudo cp bash_completion_nw.sh /etc/bash_completion.d/nw\n\n# Some distributions use this path\nsudo cp bash_completion_nw.sh /usr/share/bash-completion/completions/nw\n</code></pre>"},{"location":"shell-completion/#option-3-user-specific-bash-completion","title":"Option 3: User-specific bash-completion","text":"<p>If you use bash-completion locally:</p> <pre><code>mkdir -p ~/.local/share/bash-completion/completions\ncp bash_completion_nw.sh ~/.local/share/bash-completion/completions/nw\n</code></pre>"},{"location":"shell-completion/#usage-examples","title":"Usage Examples","text":"<p>Once installed, you can use TAB completion with the <code>nw</code> command:</p>"},{"location":"shell-completion/#basic-command-completion","title":"Basic Command Completion","text":"<pre><code>nw &lt;TAB&gt;&lt;TAB&gt;\n# Shows: info run list ...\n\nnw list &lt;TAB&gt;&lt;TAB&gt;\n# Shows: devices sequences groups supported-types ...\n</code></pre>"},{"location":"shell-completion/#device-group-and-sequence-name-completion","title":"Device, Group, and Sequence Name Completion","text":"<pre><code>nw info &lt;TAB&gt;&lt;TAB&gt;\n# Shows: core1br core2br vpn1br sw-acc1 sw-dist1 ... (devices)\n#        access_switches core_devices dmz_devices ... (groups)\n#        system_info backup_config health_check ... (sequences)\n\nnw run sw-&lt;TAB&gt;&lt;TAB&gt;\n# Shows: sw-acc1 sw-acc2 sw-dist1\n</code></pre>"},{"location":"shell-completion/#group-name-completion-as-run-target","title":"Group Name Completion (as run target)","text":"<pre><code>nw run &lt;TAB&gt;&lt;TAB&gt;\n# Shows device and group names\n</code></pre>"},{"location":"shell-completion/#sequence-completion-via-run","title":"Sequence Completion (via run)","text":"<pre><code>nw run sw-acc1 &lt;TAB&gt;&lt;TAB&gt;\n# Shows: health_check system_info interface_monitoring security_audit ...\n# Plus device-specific sequences: interface_status\n\n# Or use run with sequences (device or group)\nnw run sw-acc1 &lt;TAB&gt;&lt;TAB&gt;\n# Shows: commands or known sequences\n\nnw run core &lt;TAB&gt;&lt;TAB&gt;\n# Shows global sequences for groups\n</code></pre>"},{"location":"shell-completion/#vendoruser-defined-sequence-completion","title":"Vendor/user-defined sequence completion","text":"<pre><code>nw run sw-acc1 &lt;TAB&gt;&lt;TAB&gt;\n# Includes vendor/user sequences resolved via device type\n</code></pre>"},{"location":"shell-completion/#file-and-option-completion","title":"File and Option Completion","text":"<pre><code>nw upload sw-acc1 &lt;TAB&gt;\n# Shows file completion for local files\n\nnw info --&lt;TAB&gt;&lt;TAB&gt;\n# Shows: --config --verbose --help\n\nnw run --config &lt;TAB&gt;&lt;TAB&gt;\n# Shows *.yml and *.yaml files\n</code></pre>"},{"location":"shell-completion/#configuration-file-detection","title":"Configuration File Detection","text":"<p>The completion scripts automatically detect your configuration file:</p> <ol> <li>Looks for <code>--config</code> or <code>-c</code> options in the current command</li> <li>Falls back to <code>devices.yml</code> in the current directory</li> <li>Asks the CLI for suggestions via a hidden <code>__complete</code> command</li> </ol>"},{"location":"shell-completion/#advanced-features","title":"Advanced Features","text":""},{"location":"shell-completion/#multi-level-completion","title":"Multi-level Completion","text":"<p>The completion is context-aware and provides different suggestions based on:</p> <ul> <li>The current command being typed</li> <li>The position of the cursor</li> <li>Previously typed arguments</li> <li>The configuration file contents</li> </ul>"},{"location":"shell-completion/#dynamic-engine","title":"Dynamic Engine","text":"<p>Completions are generated by the CLI on-the-fly, so:</p> <ul> <li>New devices/groups/sequences are available immediately</li> <li>Vendor and user-defined sequences are included when relevant</li> <li>No parsing logic duplicated in shell scripts</li> </ul>"},{"location":"shell-completion/#error-handling","title":"Error Handling","text":"<p>The completion gracefully handles:</p> <ul> <li>Missing configuration files</li> <li>Malformed YAML (falls back to no completion)</li> <li>Permission issues</li> <li>Non-existent directories</li> </ul>"},{"location":"shell-completion/#troubleshooting","title":"Troubleshooting","text":""},{"location":"shell-completion/#completion-not-working","title":"Completion Not Working","text":"<ol> <li>Check if completion is loaded:</li> </ol> <pre><code>complete -p nw\n# Should show: complete -F _nw nw\n</code></pre> <ol> <li>Manually load completion:</li> </ol> <pre><code>source /path/to/bash_completion_nw.sh\n</code></pre> <ol> <li>Check bash-completion is installed:</li> </ol> <pre><code># Ubuntu/Debian\nsudo apt install bash-completion\n\n# RHEL/CentOS/Fedora\nsudo yum install bash-completion\n# or\nsudo dnf install bash-completion\n</code></pre>"},{"location":"shell-completion/#configuration-file-issues","title":"Configuration File Issues","text":"<ol> <li>Verify YAML syntax:</li> </ol> <pre><code>nw config validate\n</code></pre> <ol> <li>Check file permissions:</li> </ol> <pre><code>ls -la devices.yml\n</code></pre> <ol> <li>Test with explicit config: <pre><code>nw --config /path/to/devices.yml info &lt;TAB&gt;\n</code></pre></li> </ol>"},{"location":"shell-completion/#performance-issues","title":"Performance Issues","text":"<p>If completion is slow with large configuration files:</p> <ol> <li>Optimize YAML parsing by simplifying the awk scripts</li> <li>Cache results (future enhancement)</li> <li>Use a smaller configuration file for testing</li> </ol>"},{"location":"shell-completion/#files","title":"Files","text":"<ul> <li><code>bash_completion_nw.sh</code> - Main completion script</li> <li><code>install_completion.sh</code> - Automated installation script</li> <li><code>README.md</code> - This documentation</li> </ul>"},{"location":"shell-completion/#contributing","title":"Contributing","text":"<p>To improve the completion:</p> <ol> <li>Test with various YAML configurations</li> <li>Add support for new nw commands</li> <li>Improve performance for large config files</li> <li>Add support for additional file types</li> <li>Enhance error handling</li> </ol>"},{"location":"shell-completion/#related-commands","title":"Related Commands","text":"<p>The completion also works with these command variations:</p> <ul> <li><code>networka</code> (alternative name)</li> <li><code>network-toolkit</code> (legacy name)</li> </ul> <p>Note: This completion requires bash 4.0+ and is tested on Linux and macOS with bash-completion 2.0+.</p>"},{"location":"tmux-ssh/","title":"Cross-Platform SSH fanout","text":"<p>This adds a <code>nw ssh</code> command that opens SSH sessions to multiple devices simultaneously. The implementation adapts to your platform capabilities.</p>"},{"location":"tmux-ssh/#platform-support","title":"Platform Support","text":""},{"location":"tmux-ssh/#full-tmux-based-fanout-recommended","title":"Full tmux-based fanout (Recommended)","text":"<p>Platforms: Linux, macOS, Windows with WSL</p> <ul> <li>Opens tmux session with one pane per device</li> <li>Synchronized typing across all panes</li> <li>Native tmux navigation and controls</li> </ul>"},{"location":"tmux-ssh/#sequential-ssh-fallback","title":"Sequential SSH fallback","text":"<p>Platforms: Windows (native), any system without tmux</p> <ul> <li>Opens SSH connections one by one</li> <li>No synchronized typing</li> <li>Basic cross-platform compatibility</li> </ul>"},{"location":"tmux-ssh/#requirements","title":"Requirements","text":""},{"location":"tmux-ssh/#for-tmux-based-fanout","title":"For tmux-based fanout:","text":"<ul> <li>tmux installed and available</li> <li>libtmux Python package (install with <code>uv add libtmux</code> or <code>pip install libtmux</code>)</li> <li>SSH client (OpenSSH recommended)</li> <li>sshpass for password authentication (Linux/macOS: <code>apt install sshpass</code> or <code>brew install hudochenkov/sshpass/sshpass</code>)</li> </ul>"},{"location":"tmux-ssh/#for-sequential-fallback","title":"For sequential fallback:","text":"<ul> <li>Any SSH client (OpenSSH, PuTTY plink, etc.)</li> <li>libtmux package still required (but tmux server not needed)</li> </ul>"},{"location":"tmux-ssh/#windows-specific-notes","title":"Windows-specific notes:","text":"<ul> <li>Option 1 (Recommended): Use WSL2 with tmux for full functionality</li> <li>Option 2: Native Windows with sequential SSH fallback</li> <li>SSH clients supported: Windows OpenSSH (Win10+), PuTTY plink, Git Bash SSH</li> </ul>"},{"location":"tmux-ssh/#usage","title":"Usage","text":"<ul> <li>Single device: <code>nw ssh sw-acc1</code></li> <li>Group: <code>nw ssh office_switches</code></li> <li>Custom layout: <code>nw ssh lab_devices --layout even-vertical</code></li> <li>Name session/window: <code>nw ssh core --session-name ops --window-name core-routers</code></li> <li>Disable synchronized typing: <code>nw ssh lab_devices --no-sync</code></li> </ul> <p>Synchronized typing is ENABLED by default - your keystrokes are sent to all panes simultaneously. This is perfect for running the same commands across multiple devices. Use <code>--no-sync</code> to disable at startup.</p>"},{"location":"tmux-ssh/#synchronization-control","title":"Synchronization Control","text":""},{"location":"tmux-ssh/#at-startup","title":"At startup:","text":"<ul> <li><code>nw ssh devices</code> - sync enabled (default)</li> <li><code>nw ssh devices --no-sync</code> - start with sync disabled</li> </ul>"},{"location":"tmux-ssh/#toggle-during-session","title":"Toggle during session:","text":"<p>Quick toggle: Press Ctrl+b, t - This instantly toggles sync on/off</p> <p>Manual toggle:</p> <ol> <li>Press Ctrl+b : (colon) to enter tmux command mode</li> <li>Type <code>set synchronize-panes on</code> to enable or <code>set synchronize-panes off</code> to disable</li> <li>Press Enter to execute</li> </ol> <p>Visual indicator: When sync is enabled, all panes show a red border.</p> <p>Mouse support: Click any pane to focus it individually.</p> <p>Authentication modes:</p> <ul> <li><code>--auth auto</code> (default): uses password auth via sshpass if a password is available from env/config; otherwise uses key-based SSH.</li> <li><code>--auth key</code>: always uses your SSH keys/agent.</li> <li><code>--auth password</code>: forces password auth (requires sshpass).</li> <li><code>--auth interactive</code>: lets ssh prompt in each pane.</li> </ul>"},{"location":"tmux-ssh/#layouts","title":"Layouts","text":"<p>Supported tmux layouts:</p> <ul> <li>tiled (default)</li> <li>even-horizontal</li> <li>even-vertical</li> <li>main-horizontal</li> <li>main-vertical</li> </ul>"},{"location":"tmux-ssh/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<ul> <li>Ctrl+b, z: Zoom/unzoom focused pane (automatically exits/enters sync mode)</li> <li>Ctrl+b + Arrow keys: Navigate between panes</li> <li>Ctrl+b, d: Detach from session</li> <li>Click any pane: Focus that pane</li> <li>Ctrl+b, Space: Cycle through layouts</li> </ul> <p>Zoom behavior: When you zoom a pane (Ctrl+b, z), it maximizes that pane and automatically exits sync mode so you can work on just that device. Press Ctrl+b, z again to unzoom and return to sync mode across all panes.</p> <p>Manual sync toggle: Ctrl+b : then type <code>set synchronize-panes on</code> or <code>off</code> and press Enter</p>"},{"location":"tmux-ssh/#send-a-command-to-all-panes","title":"Send a command to all panes","text":"<p>With synchronize-panes enabled (default), type any command once and press Enter - it will be sent to ALL connected devices simultaneously. This is extremely powerful for:</p> <ul> <li>Running the same configuration command across multiple devices</li> <li>Checking status on all devices at once</li> <li>Performing batch operations</li> </ul> <p>Example: Type <code>/system identity print</code> and press Enter - this will execute on all MikroTik devices in all panes at once.</p> <p>Safety tip: Be careful with destructive commands when sync is enabled! Consider disabling sync (<code>Ctrl-b : set synchronize-panes off</code>) for device-specific operations.</p>"},{"location":"tmux-ssh/#security-note-on-password-authentication","title":"Security note on password authentication","text":"<p>When password auth is used, the password is passed to <code>sshpass</code> and may appear in process lists. Prefer SSH keys for security. If you cannot use keys, consider interactive auth (<code>--auth interactive</code>) to avoid passing passwords via arguments.</p> <p>Python-only alternative: We could embed an SSH client (e.g., Paramiko) to avoid <code>sshpass</code>, but then interactive TTY behavior and tmux integration get more complex. For now we keep it lean by delegating to the system <code>ssh</code>.</p>"},{"location":"tmux-ssh/#tmuxp-integration","title":"tmuxp integration","text":"<p>This prototype keeps it slim with libtmux directly. In future we can accept a <code>--tmuxp</code> YAML to load complex layouts via tmuxp (https://tmuxp.git-pull.com/). For now, built-ins cover common needs without extra files.</p>"},{"location":"transport/","title":"Transport Selection","text":"<p>Networka supports pluggable connection transports. Today, Scrapli is the default and stable choice. A Netmiko-based transport via Nornir is planned.</p>"},{"location":"transport/#current-status","title":"Current status","text":"<ul> <li>Default transport: <code>scrapli</code> (stable)</li> <li>Config default override: <code>general.default_transport_type</code> in <code>config/config.yml</code></li> <li>Per-device override: <code>transport_type</code> in a device entry</li> <li>CLI override: <code>--transport</code> on commands like <code>nw run</code>, <code>nw ssh</code>, <code>nw info</code></li> <li>nornir-netmiko: not yet supported but coming soon</li> </ul>"},{"location":"transport/#how-precedence-works","title":"How precedence works","text":"<ol> <li>CLI <code>--transport</code> if provided</li> <li>Device <code>transport_type</code> if set</li> <li>Global <code>general.default_transport_type</code> (defaults to <code>scrapli</code>)</li> </ol>"},{"location":"transport/#examples","title":"Examples","text":"<pre><code># Use default transport (scrapli)\nnw run sw-acc1 \"/system/identity/print\"\n\n# Force transport per run\nnw run sw-acc1 \"/system/identity/print\" --transport scrapli\n\n# Set default transport in config/config.yml\ngeneral:\n  default_transport_type: scrapli\n</code></pre>"},{"location":"transport/#notes","title":"Notes","text":"<ul> <li>Transport selection affects how connections and commands are executed.</li> <li>Some features may be transport-specific. The Scrapli transport is the reference implementation.</li> <li>nornir-netmiko is under active development and will be documented here when available.</li> <li>Windows: Scrapli is not officially supported on native Windows. Prefer WSL2/Cygwin for a POSIX environment; native use is best-effort.</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#authentication-and-credentials","title":"Authentication and credentials","text":"<ul> <li>Ensure <code>NW_USER_DEFAULT</code> and <code>NW_PASSWORD_DEFAULT</code> are set, or use a <code>.env</code> file.</li> <li>Device-specific overrides: <code>NW_{DEVICE}_USER</code>, <code>NW_{DEVICE}_PASSWORD</code>.</li> <li>See: Environment variables, Interactive credentials.</li> </ul>"},{"location":"troubleshooting/#timeouts-and-connectivity","title":"Timeouts and connectivity","text":"<ul> <li>Verify device is reachable (ping/ssh).</li> <li>Increase <code>general.timeout</code> in config.</li> <li>Check <code>device_type</code> matches the platform.</li> <li>See: Transport, Platform compatibility.</li> </ul>"},{"location":"troubleshooting/#windows-notes","title":"Windows notes","text":"<ul> <li>Prefer WSL2 (Ubuntu) for Scrapli-based transport.</li> <li>Native Windows may work but is best-effort.</li> <li>See: Platform compatibility.</li> </ul>"},{"location":"troubleshooting/#configuration-loading","title":"Configuration loading","text":"<ul> <li>Check files are in the correct directories under <code>config/</code>.</li> <li>For CSV, ensure headers match the documented schema.</li> <li>See: Configuration (CSV).</li> </ul>"},{"location":"troubleshooting/#output-formatting-and-results","title":"Output formatting and results","text":"<ul> <li>Use <code>--output-mode</code> to adjust styling.</li> <li>Use <code>--store-results</code> and <code>--results-format</code> to save outputs.</li> <li>See: Output modes, Results.</li> </ul>"},{"location":"examples/user_sequences/","title":"User-defined Sequences","text":"<p>Networka supports user-defined sequences layered on top of built-in and repo sequences.</p> <ul> <li>Built-in: packaged defaults (no setup needed)</li> <li>Repo: your project's <code>config/sequences/&lt;vendor&gt;/*.yml</code></li> <li>User: <code>~/.config/networka/sequences/&lt;vendor&gt;/*.yml</code> (highest priority)</li> </ul>"},{"location":"examples/user_sequences/#create-your-first-user-sequence","title":"Create your first user sequence","text":"<ol> <li> <p>Create the directory:</p> </li> <li> <p><code>mkdir -p ~/.config/networka/sequences/mikrotik_routeros</code></p> </li> <li> <p>Add a file <code>~/.config/networka/sequences/mikrotik_routeros/custom.yml</code>:</p> </li> </ol> <pre><code>sequences:\n  my_quick_diag:\n    description: \"Quick diagnostics\"\n    category: \"troubleshooting\"\n    timeout: 30\n    commands:\n      - \"/system/resource/print\"\n      - \"/interface/print brief\"\n</code></pre> <ol> <li> <p>List sequences:</p> </li> <li> <p><code>nw list sequences --vendor mikrotik_routeros</code></p> </li> <li> <p>Run the sequence:</p> </li> <li> <p><code>nw run &lt;device&gt; my_quick_diag</code></p> </li> </ol>"},{"location":"examples/user_sequences/#example-files-in-this-folder","title":"Example files in this folder","text":"<ul> <li><code>mikrotik_routeros/custom.yml</code> \u2014 example user sequence for RouterOS</li> <li><code>arista_eos/custom.yml</code> \u2014 example user sequence for Arista EOS</li> </ul>"},{"location":"reference/api/","title":"API Reference","text":"<p>Info</p> <p>The API reference is not yet implemented. Coming soon.</p>"},{"location":"reference/api/#planned-coverage","title":"Planned coverage","text":"<ul> <li>Configuration models (<code>network_toolkit.config.*</code>) \u2014 Pydantic v2 models for devices, groups, sequences, and general settings</li> <li>Device session (<code>network_toolkit.device.DeviceSession</code>) \u2014 async SSH session management, command execution, file transfer</li> <li>Exceptions (<code>network_toolkit.exceptions.*</code>) \u2014 typed error hierarchy for connection, auth, timeouts, execution, configuration</li> <li>Results management (<code>network_toolkit.results.*</code>) \u2014 structured results, storage, and output formatting</li> <li>Commands/operations (<code>network_toolkit.commands.*</code>) \u2014 reusable operations backing the CLI (run, upload/download, backup, firmware)</li> <li>Common utilities (<code>network_toolkit.common.*</code>) \u2014 logging, output manager, and helpers used across modules</li> </ul> <p>See Development guide for contribution details: <code>docs/development.md</code>.</p>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>This page is auto-generated from the actual CLI code so it always reflects the real commands. No manual maintenance needed.</p>"},{"location":"reference/cli/#nw","title":"nw","text":"<p>Networka (nw)</p> <p>A powerful multi-vendor CLI tool for automating network devices based on ssh protocol. Built with async/await support and type safety in mind.</p> <p>QUICK START:   nw run sw-acc1 '/system/clock/print'  # Execute command   nw run office_switches system_info    # Run sequence on group</p> <p>For detailed help on any command: nw  --help Default config directory: system app config (use --config to override) <p>Usage:</p> <pre><code>nw [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show version information <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-backup","title":"nw backup","text":"<p>Backup operations for network devices</p> <p>Usage:</p> <pre><code>nw backup [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-backup-comprehensive","title":"nw backup comprehensive","text":"<p>Perform comprehensive backup including vendor-specific data.</p> <p>Performs a comprehensive backup for the specified device or group, including vendor-specific configuration and operational data.</p> <p>Usage:</p> <pre><code>nw backup comprehensive [OPTIONS] TARGET_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--download</code> / <code>--no-download</code> boolean Download created backup/export files after running the sequence <code>True</code> <code>--delete-remote</code> / <code>--keep-remote</code> boolean Delete remote backup/export files after successful download <code>False</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-backup-config","title":"nw backup config","text":"<p>Backup device configuration.</p> <p>Performs a configuration backup for the specified device or group.</p> <p>Usage:</p> <pre><code>nw backup config [OPTIONS] TARGET_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--download</code> / <code>--no-download</code> boolean Download created backup/export files after running the sequence <code>True</code> <code>--delete-remote</code> / <code>--keep-remote</code> boolean Delete remote backup/export files after successful download <code>False</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-backup-vendors","title":"nw backup vendors","text":"<p>Show which vendors support backup operations.</p> <p>Lists all supported vendors and their backup operation capabilities.</p> <p>Usage:</p> <pre><code>nw backup vendors [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-config","title":"nw config","text":"<p>Configuration management commands</p> <p>Usage:</p> <pre><code>nw config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-config-init","title":"nw config init","text":"<p>Initialize a network toolkit configuration in OS-appropriate location.</p> <p>Creates a complete starter configuration with: - .env file with credential templates - config.yml with core settings - devices/ with MikroTik and Cisco examples - groups/ with tag-based and explicit groups - sequences/ with global and vendor-specific sequences - JSON schemas for YAML editor validation (optional) - Shell completions (optional) - Additional predefined sequences from GitHub (optional)</p> <p>Default locations by OS: - Linux: ~/.config/networka/ - macOS: ~/Library/Application Support/networka/ - Windows: %APPDATA%/networka/</p> <p>The 'nw' command will automatically find configurations in these locations.</p> <p>Usage:</p> <pre><code>nw config init [OPTIONS] [TARGET_DIR]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--force</code>, <code>-f</code> boolean Overwrite existing files <code>False</code> <code>--yes</code>, <code>-y</code> boolean Non-interactive: accept defaults <code>False</code> <code>--dry-run</code> boolean Show actions without writing changes <code>False</code> <code>--install-sequences</code> / <code>--no-install-sequences</code> boolean Install additional predefined vendor sequences from GitHub None <code>--git-url</code> text Git URL for sequences when using --sequences-source git None <code>--git-ref</code> text Git branch/tag/ref for sequences <code>main</code> <code>--install-completions</code> / <code>--no-install-completions</code> boolean Install shell completion scripts None <code>--shell</code> text Shell for completions (bash or zsh) None <code>--activate-completions</code> / <code>--no-activate-completions</code> boolean Activate completions by updating shell rc file None <code>--install-schemas</code> / <code>--no-install-schemas</code> boolean Install JSON schemas for YAML editor validation and auto-completion None <code>--verbose</code>, <code>-v</code> boolean Enable verbose logging <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-config-validate","title":"nw config validate","text":"<p>Validate the configuration file and show any issues.</p> <p>Usage:</p> <pre><code>nw config validate [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--verbose</code>, <code>-v</code> boolean Show detailed validation information <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-diff","title":"nw diff","text":"<p>Diff config, a command, or a sequence.</p> <p>Examples:   - nw diff sw-acc1 config -b baseline/export_compact.txt   - nw diff sw-acc1 \"/system/resource/print\" -b baseline/resource.txt   - nw diff lab_devices system_info -b baseline_dir/   - nw diff sw-acc1,sw-acc2 \"/system/resource/print\"   # device-to-device   - nw diff sw-acc1,sw-acc2 config                      # device-to-device</p> <p>Usage:</p> <pre><code>nw diff [OPTIONS] TARGET SUBJECT\n</code></pre> <p>Options:</p> Name Type Description Default <code>--baseline</code>, <code>-b</code> path Baseline file (for config/command) or directory (for sequence). None <code>--ignore</code> text Regex to ignore lines; repeat for multiple patterns. None <code>--save-current</code> path Optional path to save the current fetched state (file or directory). None <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--verbose</code>, <code>-v</code> boolean Enable verbose logging <code>False</code> <code>--store-results</code>, <code>-s</code> boolean Store diff outputs to files <code>False</code> <code>--results-dir</code> text Override results directory None <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-download","title":"nw download","text":"<p>Download a file from a device or all devices in a group.</p> <p>Usage:</p> <pre><code>nw download [OPTIONS] &lt;device|group&gt; REMOTE_FILE LOCAL_PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>--delete-remote</code> / <code>--keep-remote</code> boolean Delete remote file after successful download <code>False</code> <code>--verify</code> / <code>--no-verify</code> boolean Verify download by comparing file sizes <code>True</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-firmware","title":"nw firmware","text":"<p>Firmware management operations</p> <p>Usage:</p> <pre><code>nw firmware [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-firmware-bios","title":"nw firmware bios","text":"<p>Upgrade BIOS on network devices.</p> <p>Upgrades device BIOS/RouterBOOT using platform-specific implementations.</p> <p>Usage:</p> <pre><code>nw firmware bios [OPTIONS] TARGET_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--precheck-sequence</code> text Pre-check sequence name <code>pre_maintenance</code> <code>--skip-precheck</code> boolean Skip pre-check sequence <code>False</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-firmware-downgrade","title":"nw firmware downgrade","text":"<p>Downgrade firmware on network devices.</p> <p>Uploads and installs firmware downgrade on the specified device or group.</p> <p>Usage:</p> <pre><code>nw firmware downgrade [OPTIONS] TARGET_NAME FIRMWARE_FILE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--precheck-sequence</code> text Pre-check sequence name <code>pre_maintenance</code> <code>--skip-precheck</code> boolean Skip pre-check sequence <code>False</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-firmware-upgrade","title":"nw firmware upgrade","text":"<p>Upgrade firmware on network devices.</p> <p>Uploads and installs firmware upgrade on the specified device or group.</p> <p>Usage:</p> <pre><code>nw firmware upgrade [OPTIONS] TARGET_NAME FIRMWARE_FILE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--precheck-sequence</code> text Pre-check sequence name <code>pre_maintenance</code> <code>--skip-precheck</code> boolean Skip pre-check sequence <code>False</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-firmware-vendors","title":"nw firmware vendors","text":"<p>Show which vendors support firmware operations.</p> <p>Lists all supported vendors and their firmware operation capabilities.</p> <p>Usage:</p> <pre><code>nw firmware vendors [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-info","title":"nw info","text":"<p>Show comprehensive information for devices, groups, or sequences.</p> <p>Supports comma-separated device names, group names, and sequence names.</p> <p>Examples: - nw info sw-acc1                    # Show device info - nw info sw-acc1,sw-acc2           # Show multiple devices - nw info access_switches           # Show group info - nw info system_info               # Show sequence info - nw info sw-acc1,access_switches,health_check  # Mixed types</p> <p>Usage:</p> <pre><code>nw info [OPTIONS] TARGETS\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Configuration directory or file path <code>config</code> <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--verbose</code>, <code>-v</code> boolean Enable verbose logging <code>False</code> <code>--interactive-auth</code>, <code>-i</code> boolean Prompt for username and password interactively <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-list","title":"nw list","text":"<p>List network devices, groups, sequences, and platform information</p> <p>Usage:</p> <pre><code>nw list [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-list-devices","title":"nw list devices","text":"<p>List all configured network devices.</p> <p>Usage:</p> <pre><code>nw list devices [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--verbose</code>, <code>-v</code> boolean Enable verbose logging <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-list-groups","title":"nw list groups","text":"<p>List all configured device groups and their members.</p> <p>Usage:</p> <pre><code>nw list groups [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--verbose</code>, <code>-v</code> boolean Show detailed information <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-list-sequences","title":"nw list sequences","text":"<p>List all available command sequences, optionally filtered by vendor or category.</p> <p>Usage:</p> <pre><code>nw list sequences [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--vendor</code>, <code>-v</code> text Filter by vendor platform None <code>--category</code> text Filter by sequence category None <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--verbose</code> boolean Show detailed information <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-list-supported-types","title":"nw list supported-types","text":"<p>Show supported device types and platform information.</p> <p>Usage:</p> <pre><code>nw list supported-types [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbose</code>, <code>-v</code> boolean Show detailed information <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-run","title":"nw run","text":"<p>Execute a single command or a sequence on a device or a group.</p> <p>Usage:</p> <pre><code>nw run [OPTIONS] TARGET COMMAND_OR_SEQUENCE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Configuration directory or file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose logging <code>False</code> <code>--store-results</code>, <code>-s</code> boolean Store command results to files <code>False</code> <code>--results-dir</code> text Override results directory None <code>--output-mode</code>, <code>-o</code> choice (<code>default</code> | <code>light</code> | <code>dark</code> | <code>no-color</code> | <code>raw</code> | <code>json</code>) Output decoration mode: default, light, dark, no-color, raw None <code>--interactive-auth</code>, <code>-i</code> boolean Prompt for username and password interactively <code>False</code> <code>--platform</code>, <code>-p</code> text Device type when using IP addresses (e.g., mikrotik_routeros). Note: This specifies the network driver type, not hardware platform. None <code>--port</code> integer SSH port when using IP addresses (default: 22) None <code>--transport</code>, <code>-t</code> text Transport type to use for connections (currently only scrapli is supported). Defaults to configuration or scrapli. None <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-schema","title":"nw schema","text":"<p>JSON schema management commands</p> <p>Usage:</p> <pre><code>nw schema [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-schema-info","title":"nw schema info","text":"<p>Display information about JSON schema files.</p> <p>Usage:</p> <pre><code>nw schema info [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbose</code>, <code>-v</code> boolean N/A <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-schema-update","title":"nw schema update","text":"<p>Update JSON schemas for YAML editor validation.</p> <p>Regenerates the JSON schema files used by VS Code and other YAML editors to provide validation and auto-completion for configuration files.</p> <p>Creates/updates: - schemas/network-config.schema.json (full config) - schemas/device-config.schema.json (device collections) - schemas/groups-config.schema.json (group collections) - .vscode/settings.json (VS Code YAML validation)</p> <p>Usage:</p> <pre><code>nw schema update [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbose</code>, <code>-v</code> boolean N/A <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-ssh","title":"nw ssh","text":"<p>Open tmux with SSH panes for a device or group.</p> <p>Synchronized typing is ENABLED by default - keystrokes go to all panes. Use --no-sync to disable at startup.</p> <p>Quick controls: - Ctrl+b, z: Zoom/unzoom focused pane (exits/enters sync mode) - Ctrl+b + Arrow keys: Navigate panes - Click any pane to focus it - Ctrl+b, d: Detach session</p> <p>When sync is on, all panes show red borders.</p> <p>Usage:</p> <pre><code>nw ssh [OPTIONS] TARGET\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config</code>, <code>-c</code> path Path to config dir or YAML <code>config</code> <code>--auth</code> choice (<code>key-first</code> | <code>key</code> | <code>password</code> | <code>interactive</code>) Authentication mode: key-first (default), key, password, interactive <code>AuthMode.KEY_FIRST</code> <code>--user</code> text Override username for SSH None <code>--password</code> text Override password for SSH None <code>--layout</code> text tmux layout to use: tiled, even-horizontal, even-vertical, main-horizontal, main-vertical <code>tiled</code> <code>--session-name</code> text Custom session name None <code>--window-name</code> text Custom window name None <code>--sync</code> / <code>--no-sync</code> boolean Enable synchronized typing (default: on) <code>True</code> <code>--use-sshpass</code> boolean Use sshpass (same as --auth password) <code>False</code> <code>--attach</code> / <code>--no-attach</code> boolean Attach after creating <code>True</code> <code>--verbose</code>, <code>-v</code> boolean Enable debug logging <code>False</code> <code>--platform</code>, <code>-p</code> text Device type when using IP addresses (e.g., mikrotik_routeros). Note: This specifies the network driver type, not hardware platform. None <code>--port</code> integer SSH port when using IP addresses (default: 22) None <code>--transport</code>, <code>-t</code> text Transport type for connections (currently only scrapli is supported). Defaults to configuration or scrapli. None <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#nw-upload","title":"nw upload","text":"<p>Upload a file to a device or to all devices in a group.</p> <p>Usage:</p> <pre><code>nw upload [OPTIONS] &lt;device|group&gt; LOCAL_FILE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--remote-name</code>, <code>-r</code> text Remote filename (default: same as local) None <code>--verify</code> / <code>--no-verify</code> boolean Verify upload by checking file exists <code>True</code> <code>--checksum-verify</code> / <code>--no-checksum-verify</code> boolean Verify file integrity using checksums (uses config default if not specified) <code>False</code> <code>--max-concurrent</code>, <code>-j</code> integer Maximum concurrent uploads when target is a group <code>5</code> <code>--config</code>, <code>-c</code> path Configuration file path <code>config</code> <code>--verbose</code>, <code>-v</code> boolean Enable verbose output <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <p>:::</p>"},{"location":"vendors/","title":"Vendor support","text":"<p>Networka provides a common interface across multiple network operating systems. Vendor guides document platform nuances, supported operations, and recommended workflows.</p> <ul> <li>MikroTik RouterOS \u2014 see guide</li> <li>Cisco IOS / IOS-XE \u2014 see guide</li> <li>Arista EOS \u2014 needs testing</li> <li>Juniper JunOS \u2014 needs testing</li> </ul> <p>Note: Each vendor page follows the same structure so it\u2019s easy to read and easy for tools/LLMs to parse: overview, identifiers, supported operations, firmware management, backups, built-in sequences, examples, and configuration tips. When adding a new vendor, mirror this structure for consistency.</p>"},{"location":"vendors/arista/","title":"Arista EOS","text":"<p>Supported identifiers: <code>arista_eos</code></p>"},{"location":"vendors/arista/#highlights","title":"Highlights","text":"<p>Status: coming soon. Vendor-specific documentation for firmware management, backups, and sequences is being prepared.</p>"},{"location":"vendors/arista/#examples","title":"Examples","text":"<p><pre><code>nw run eos1 \"show version\"\n</code></pre> For now, you can browse example user sequences under <code>docs/examples/user_sequences/arista_eos/</code> and run ad-hoc commands:</p>"},{"location":"vendors/cisco/","title":"Cisco IOS / IOS-XE","text":"<p>This guide explains how Networka works with Cisco IOS and IOS-XE devices: identifiers, supported operations, firmware upgrade/downgrade handling, backups, and sequences.</p>"},{"location":"vendors/cisco/#platform-identifiers","title":"Platform identifiers","text":"<ul> <li>device_type: <code>cisco_ios</code></li> <li>device_type: <code>cisco_iosxe</code></li> <li>Platform names: Cisco IOS, Cisco IOS-XE</li> </ul>"},{"location":"vendors/cisco/#supported-operations","title":"Supported operations","text":"<ul> <li>Firmware upgrade: yes (<code>nw upgrade</code>) \u2014 IOS ext: <code>.bin</code>, <code>.tar</code>; IOS-XE ext: <code>.bin</code>, <code>.pkg</code></li> <li>Firmware downgrade: yes (<code>nw downgrade</code>) \u2014 same as upgrade workflow</li> <li>BIOS upgrade: not applicable for IOS/IOS-XE (<code>nw bios</code> not supported)</li> <li>Configuration backup: yes (<code>nw config-backup</code> or <code>nw backup config</code>)</li> </ul>"},{"location":"vendors/cisco/#firmware-management","title":"Firmware management","text":"<p>IOS (classic, monolithic image):</p> <ul> <li>Upload image to flash (SCP).</li> <li>Configure <code>boot system flash:&lt;image&gt;</code> after clearing existing <code>boot system</code> lines.</li> <li>Save config and <code>reload</code> with interactive confirmation.</li> </ul> <p>IOS-XE INSTALL mode (preferred):</p> <ul> <li>Upload image to flash.</li> <li><code>install add file flash:&lt;image&gt;</code></li> <li><code>install activate file flash:&lt;image&gt;</code> (device reloads)</li> <li>After verifying, <code>install commit</code> to make permanent; <code>install rollback</code> is available for downgrade when supported.</li> </ul> <p>Networka chooses the proper workflow based on device capabilities. If INSTALL commands are not available, IOS-XE falls back to the traditional boot system method.</p> <p>CLI shortcuts:</p> <ul> <li>Upgrade: <code>nw upgrade &lt;device|group&gt; &lt;path/to/image.bin&gt;</code></li> <li>Downgrade: <code>nw downgrade &lt;device|group&gt; &lt;path/to/older.bin&gt;</code> (or <code>install rollback</code> for IOS-XE when available)</li> </ul> <p>Pre-checks: by default Networka runs the <code>pre_maintenance</code> sequence before firmware actions. Override with <code>--precheck-sequence</code> or skip via <code>--skip-precheck</code>.</p>"},{"location":"vendors/cisco/#backups","title":"Backups","text":"<ul> <li>Config backup (text): <code>nw config-backup &lt;device|group&gt;</code></li> <li>Uses <code>show running-config</code> (and optionally other show commands). For Cisco, output is not saved as a remote file by default; Networka captures command output.</li> <li>Comprehensive backup: <code>nw backup comprehensive &lt;device|group&gt;</code></li> <li>Can include <code>show running-config</code>, <code>show startup-config</code>, <code>show version</code>, <code>show inventory</code>, etc.</li> </ul> <p>You can define/override sequences under <code>config/sequences/cisco_iosxe/common.yml</code> (also applies to many IOS show commands). Device-specific sequences can be set per device in your config.</p>"},{"location":"vendors/cisco/#built-in-command-sequences","title":"Built-in command sequences","text":"<p>Common examples you can reference via <code>nw run &lt;device&gt; &lt;sequence-name&gt;</code>:</p> <ul> <li><code>system_info</code>, <code>health_check</code>, <code>interface_status</code>, <code>network_overview</code>, <code>routing_info</code>, <code>security_audit</code></li> </ul> <p>See file: <code>config/sequences/cisco_iosxe/common.yml</code> for a rich set of examples that work on IOS-XE and often IOS.</p>"},{"location":"vendors/cisco/#examples","title":"Examples","text":"<p>Run commands and sequences:</p> <pre><code>nw run switch1 \"show version\"\nnw run switch1 interface_status\n</code></pre> <p>Firmware and backups:</p> <pre><code>nw upgrade switch1 ~/images/cat9k_iosxe.17.6.5.SPA.bin\nnw downgrade switch1 ~/images/cat9k_iosxe.17.3.7.SPA.bin\nnw config-backup switch1 --download=false\n</code></pre>"},{"location":"vendors/cisco/#notes-and-tips","title":"Notes and tips","text":"<ul> <li>Ensure there\u2019s enough flash space before uploads; Networka doesn\u2019t remove old images automatically.</li> <li>After IOS-XE <code>install activate</code>, use <code>install commit</code> when satisfied; <code>install rollback</code> can revert.</li> <li>Prefer SSH transport; interactive reload confirmations are handled by Networka.</li> </ul>"},{"location":"vendors/juniper/","title":"Juniper JunOS","text":"<p>Supported identifiers: <code>juniper_junos</code></p> <p>Status: coming soon. Vendor-specific documentation for firmware management, backups, and sequences is being prepared.</p> <p>For now, you can run ad-hoc commands:</p> <pre><code>nw run router1 \"show system information\"\n</code></pre>"},{"location":"vendors/mikrotik/","title":"MikroTik RouterOS","text":"<p>This guide explains how Networka works with MikroTik RouterOS devices: identifiers, supported operations, firmware upgrade/downgrade/RouterBOARD (BIOS) handling, backups, and built-in sequences.</p>"},{"location":"vendors/mikrotik/#platform-identifiers","title":"Platform identifiers","text":"<ul> <li>device_type: <code>mikrotik_routeros</code></li> <li>Platform name: MikroTik RouterOS</li> </ul>"},{"location":"vendors/mikrotik/#supported-operations","title":"Supported operations","text":"<ul> <li>Firmware upgrade: yes (<code>nw upgrade</code>) \u2014 file extension: <code>.npk</code></li> <li>Firmware downgrade: yes (<code>nw downgrade</code>) \u2014 file extension: <code>.npk</code></li> <li>BIOS/RouterBOARD upgrade: yes (<code>nw bios</code>)</li> <li>Configuration backup: yes (<code>nw config-backup</code> or <code>nw backup config</code>)</li> </ul>"},{"location":"vendors/mikrotik/#firmware-management","title":"Firmware management","text":"<p>Workflow used by Networka (RouterOS operations):</p> <ul> <li>Upload <code>.npk</code> package via SCP.</li> <li>Optional verification of packages with <code>/system/package/print</code>.</li> <li>Reboot with interactive confirmation to apply the package.</li> </ul> <p>CLI shortcuts:</p> <ul> <li>Upgrade: <code>nw upgrade &lt;device|group&gt; &lt;path/to/firmware.npk&gt;</code></li> <li>Downgrade: <code>nw downgrade &lt;device|group&gt; &lt;path/to/older.npk&gt;</code></li> <li>RouterBOARD (BIOS): <code>nw bios &lt;device|group&gt;</code> \u2014 schedules <code>/system/routerboard/upgrade</code> then reboots.</li> </ul> <p>Pre-checks: by default Networka runs the <code>pre_maintenance</code> sequence before firmware actions. Override with <code>--precheck-sequence</code> or skip via <code>--skip-precheck</code>.</p>"},{"location":"vendors/mikrotik/#backups","title":"Backups","text":"<p>Two flavors exist:</p> <ul> <li>Config backup (text export): <code>nw config-backup &lt;device|group&gt;</code></li> <li>Creates an export (default: <code>/export file=nw-config-export</code>), then can download <code>nw-config-export.rsc</code> to <code>general.backup_dir</code>.</li> <li>Comprehensive backup: <code>nw backup comprehensive &lt;device|group&gt;</code></li> <li>Uses export plus system backup (e.g., <code>/system/backup/save name=nw-system-backup</code>).</li> </ul> <p>You can also define/override sequences under config: <code>config/sequences/mikrotik_routeros/common.yml</code>.</p>"},{"location":"vendors/mikrotik/#built-in-command-sequences","title":"Built-in command sequences","text":"<p>RouterOS includes built-in sequences you can reference via <code>nw run &lt;device&gt; &lt;sequence-name&gt;</code> or include in your configuration. Examples include:</p> <ul> <li><code>system_info</code>, <code>health_check</code>, <code>interface_status</code>, <code>routing_info</code>, <code>security_audit</code></li> </ul> <p>See file: <code>src/network_toolkit/builtin_sequences/mikrotik_routeros/common.yml</code></p> <p>Project configuration examples for global or device-level sequences live under: <code>config/sequences/mikrotik_routeros/common.yml</code>.</p>"},{"location":"vendors/mikrotik/#examples","title":"Examples","text":"<p>Run commands and sequences:</p> <pre><code>nw run router1 \"/system/identity/print\"\nnw run router1 system_info\n</code></pre> <p>Firmware and backups:</p> <pre><code>nw upgrade router1 ~/firmware/routeros-7.16.2-arm64.npk\nnw bios router1\nnw config-backup router1 --download --delete-remote\n</code></pre>"},{"location":"vendors/mikrotik/#notes-and-tips","title":"Notes and tips","text":"<ul> <li>Set <code>general.firmware_dir</code> and <code>general.backup_dir</code> in <code>config/config.yml</code>.</li> <li>Transport: SSH is recommended; interactive confirmations are handled by Networka.</li> <li>Results and logs can be stored under <code>results/</code> and <code>logs/</code> if enabled.</li> </ul>"}]}