"""File utilities for config management and updates."""

from __future__ import annotations

import hashlib
import re
from enum import Enum
from pathlib import Path


class FileType(Enum):
    """Classification of configuration files."""

    PROTECTED = "protected"
    FRAMEWORK = "framework"
    CUSTOM = "custom"
    USER_MODIFIED = "user_modified"


def calculate_checksum(file_path: Path) -> str:
    """Calculate SHA256 checksum of a file.

    Args:
        file_path: Path to file

    Returns:
        Hexadecimal checksum string
    """
    sha256 = hashlib.sha256()
    with file_path.open("rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            sha256.update(chunk)
    return sha256.hexdigest()


def matches_pattern(path: Path, pattern: str) -> bool:
    """Check if path matches glob-style pattern.

    Args:
        path: Path to check (relative)
        pattern: Glob pattern (e.g., 'sequences/*/common.yml')

    Returns:
        True if matches
    """
    # Convert glob pattern to regex
    pattern_regex = pattern.replace("**", ".*").replace("*", "[^/]+").replace("?", ".")
    pattern_compiled = re.compile(f"^{pattern_regex}$")
    return bool(pattern_compiled.match(str(path)))


def classify_file(path: Path, config_root: Path) -> FileType:
    """Classify a configuration file.

    Classification rules:
    1. .env, devices/*, groups/* -> PROTECTED (never update)
    2. sequences/custom/* -> CUSTOM (user files, never update)
    3. sequences/*/common.yml, schemas/*, .vscode/* -> FRAMEWORK (safe to update)
    4. Everything else -> USER_MODIFIED (assume customized)

    Args:
        path: Absolute path to file
        config_root: Root of config directory

    Returns:
        FileType classification
    """
    try:
        rel_path = path.relative_to(config_root)
    except ValueError:
        return FileType.USER_MODIFIED

    # PROTECTED - Never update
    if rel_path.name == ".env":
        return FileType.PROTECTED

    parts = rel_path.parts
    if len(parts) > 0:
        if parts[0] in ("devices", "groups"):
            return FileType.PROTECTED

        # CUSTOM - User files in custom directory
        if "custom" in parts:
            return FileType.CUSTOM

    # FRAMEWORK - Safe to update if unmodified
    framework_patterns = [
        "sequences/*/common.yml",
        "sequences/sequences.yml",
        "schemas/**/*",
        ".vscode/**/*",
    ]

    for pattern in framework_patterns:
        if matches_pattern(rel_path, pattern):
            return FileType.FRAMEWORK

    # Default: Assume user modified
    return FileType.USER_MODIFIED


def get_framework_file_warning() -> str:
    """Get standard warning header for framework files.

    Returns:
        Warning text to prepend to framework files
    """
    return """# WARNING: Framework-managed file
# This file is maintained by the Networka framework and may be overwritten during updates.
#
# To customize sequences:
# 1. Copy this file to sequences/custom/my_sequences.yml
# 2. Modify your custom copy
# 3. Custom sequences take precedence over framework sequences
#
# DO NOT edit this file directly - your changes may be lost during updates.
# Use 'nw config update' to get the latest framework sequences.

"""


def is_framework_file(path: Path, config_root: Path) -> bool:
    """Check if file is a framework-managed file.

    Args:
        path: Absolute path to file
        config_root: Root of config directory

    Returns:
        True if framework file
    """
    return classify_file(path, config_root) == FileType.FRAMEWORK
