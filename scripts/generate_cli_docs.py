"""Generate CLI documentation using Typer's official command."""

from __future__ import annotations

import subprocess
import sys
from pathlib import Path

REPO_ROOT = Path(__file__).resolve().parents[1]
DOC_PATH = REPO_ROOT / "docs" / "reference" / "cli.md"
HIDDEN_COMMANDS = {"nw __complete"}
WARNING_BANNER = (
    "<!--\n"
    "This file is auto-generated by scripts/generate_cli_docs.py using Typer.\n"
    "Do not edit manually. Update command help text and rerun:\n"
    "    uv run python scripts/generate_cli_docs.py\n"
    "-->\n\n"
)


def generate_docs() -> str:
    """Run Typer's built-in docs generator and return the markdown output."""
    command = [
        sys.executable,
        "-m",
        "typer",
        "network_toolkit.cli",
        "utils",
        "docs",
        "--name",
        "nw",
    ]

    process = subprocess.run(
        command,
        check=False,
        capture_output=True,
        text=True,
    )
    if process.returncode != 0:
        message = process.stderr.strip() or "Failed to generate CLI documentation."
        raise SystemExit(message)
    return process.stdout


def strip_hidden_sections(markdown: str) -> str:
    """Remove sections and listings for commands we do not publish."""
    if not HIDDEN_COMMANDS:
        return markdown

    hidden_headers = {f"`{name}`" for name in HIDDEN_COMMANDS}
    hidden_bullets = {f"`{name.split(maxsplit=1)[-1]}`" for name in HIDDEN_COMMANDS}

    lines = markdown.splitlines()
    filtered: list[str] = []
    skipping = False

    for line in lines:
        if line.startswith("## "):
            header = line[3:].strip()
            if header in hidden_headers:
                skipping = True
                continue
            skipping = False

        if skipping:
            continue

        stripped = line.lstrip()
        if stripped.startswith("* ") and any(token in line for token in hidden_bullets):
            continue

        filtered.append(line)

    result = "\n".join(filtered)
    if markdown.endswith("\n"):
        return result + "\n"
    return result


def write_docs(markdown: str) -> None:
    """Write the generated markdown to the reference file with banner."""
    DOC_PATH.parent.mkdir(parents=True, exist_ok=True)
    DOC_PATH.write_text(WARNING_BANNER + markdown, encoding="utf-8")


def main() -> None:
    markdown = generate_docs()
    cleaned = strip_hidden_sections(markdown)
    write_docs(cleaned)


if __name__ == "__main__":
    main()
